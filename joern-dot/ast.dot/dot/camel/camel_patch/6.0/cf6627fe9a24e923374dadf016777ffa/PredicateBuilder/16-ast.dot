digraph "regex" {  
"283" [label = <(METHOD,regex)<SUB>265</SUB>> ]
"284" [label = <(PARAM,final Expression&lt;E&gt; expression)<SUB>265</SUB>> ]
"285" [label = <(PARAM,final Pattern pattern)<SUB>266</SUB>> ]
"286" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>266</SUB>> ]
"287" [label = <(notNull,notNull(expression, &quot;expression&quot;))<SUB>267</SUB>> ]
"288" [label = <(IDENTIFIER,this,notNull(expression, &quot;expression&quot;))<SUB>267</SUB>> ]
"289" [label = <(IDENTIFIER,expression,notNull(expression, &quot;expression&quot;))<SUB>267</SUB>> ]
"290" [label = <(LITERAL,&quot;expression&quot;,notNull(expression, &quot;expression&quot;))<SUB>267</SUB>> ]
"291" [label = <(notNull,notNull(pattern, &quot;pattern&quot;))<SUB>268</SUB>> ]
"292" [label = <(IDENTIFIER,this,notNull(pattern, &quot;pattern&quot;))<SUB>268</SUB>> ]
"293" [label = <(IDENTIFIER,pattern,notNull(pattern, &quot;pattern&quot;))<SUB>268</SUB>> ]
"294" [label = <(LITERAL,&quot;pattern&quot;,notNull(pattern, &quot;pattern&quot;))<SUB>268</SUB>> ]
"295" [label = <(RETURN,return new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012};,return new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012};)<SUB>270</SUB>> ]
"296" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>270</SUB>> ]
"297" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"298" [label = <(IDENTIFIER,$obj12,&lt;empty&gt;)> ]
"299" [label = <(&lt;operator&gt;.alloc,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})<SUB>270</SUB>> ]
"300" [label = <(&lt;init&gt;,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})<SUB>270</SUB>> ]
"301" [label = <(IDENTIFIER,$obj12,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})> ]
"302" [label = <(IDENTIFIER,$obj12,&lt;empty&gt;)> ]
"303" [label = <(MODIFIER,PUBLIC)> ]
"304" [label = <(MODIFIER,STATIC)> ]
"305" [label = <(METHOD_RETURN,ANY)<SUB>265</SUB>> ]
  "283" -> "284" 
  "283" -> "285" 
  "283" -> "286" 
  "283" -> "303" 
  "283" -> "304" 
  "283" -> "305" 
  "286" -> "287" 
  "286" -> "291" 
  "286" -> "295" 
  "287" -> "288" 
  "287" -> "289" 
  "287" -> "290" 
  "291" -> "292" 
  "291" -> "293" 
  "291" -> "294" 
  "295" -> "296" 
  "296" -> "297" 
  "296" -> "300" 
  "296" -> "302" 
  "297" -> "298" 
  "297" -> "299" 
  "300" -> "301" 
}
