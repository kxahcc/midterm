digraph "regexReplaceAll" {  
"516" [label = <(METHOD,regexReplaceAll)<SUB>486</SUB>> ]
"517" [label = <(PARAM,final Expression&lt;E&gt; expression)<SUB>486</SUB>> ]
"518" [label = <(PARAM,final String regex)<SUB>487</SUB>> ]
"519" [label = <(PARAM,final String replacement)<SUB>487</SUB>> ]
"520" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>487</SUB>> ]
"521" [label = <(LOCAL,Pattern pattern: java.util.regex.Pattern)> ]
"522" [label = <(&lt;operator&gt;.assignment,Pattern pattern = Pattern.compile(regex))<SUB>488</SUB>> ]
"523" [label = <(IDENTIFIER,pattern,Pattern pattern = Pattern.compile(regex))<SUB>488</SUB>> ]
"524" [label = <(compile,Pattern.compile(regex))<SUB>488</SUB>> ]
"525" [label = <(IDENTIFIER,Pattern,Pattern.compile(regex))<SUB>488</SUB>> ]
"526" [label = <(IDENTIFIER,regex,Pattern.compile(regex))<SUB>488</SUB>> ]
"527" [label = <(RETURN,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return pattern.matcher(text).replaceAll(replacement);\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexReplaceAll(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012};,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return pattern.matcher(text).replaceAll(replacement);\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexReplaceAll(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012};)<SUB>489</SUB>> ]
"528" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>489</SUB>> ]
"529" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"530" [label = <(IDENTIFIER,$obj31,&lt;empty&gt;)> ]
"531" [label = <(&lt;operator&gt;.alloc,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return pattern.matcher(text).replaceAll(replacement);\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexReplaceAll(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})<SUB>489</SUB>> ]
"532" [label = <(&lt;init&gt;,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return pattern.matcher(text).replaceAll(replacement);\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexReplaceAll(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})<SUB>489</SUB>> ]
"533" [label = <(IDENTIFIER,$obj31,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return pattern.matcher(text).replaceAll(replacement);\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexReplaceAll(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})> ]
"534" [label = <(IDENTIFIER,$obj31,&lt;empty&gt;)> ]
"535" [label = <(MODIFIER,PUBLIC)> ]
"536" [label = <(MODIFIER,STATIC)> ]
"537" [label = <(METHOD_RETURN,ANY)<SUB>486</SUB>> ]
  "516" -> "517" 
  "516" -> "518" 
  "516" -> "519" 
  "516" -> "520" 
  "516" -> "535" 
  "516" -> "536" 
  "516" -> "537" 
  "520" -> "521" 
  "520" -> "522" 
  "520" -> "527" 
  "522" -> "523" 
  "522" -> "524" 
  "524" -> "525" 
  "524" -> "526" 
  "527" -> "528" 
  "528" -> "529" 
  "528" -> "532" 
  "528" -> "534" 
  "529" -> "530" 
  "529" -> "531" 
  "532" -> "533" 
}
