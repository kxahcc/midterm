digraph "regexTokenize" {  
"156" [label = <(METHOD,regexTokenize)<SUB>223</SUB>> ]
"157" [label = <(PARAM,final Expression&lt;E&gt; expression)<SUB>223</SUB>> ]
"158" [label = <(PARAM,String regexTokenizer)<SUB>223</SUB>> ]
"159" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>223</SUB>> ]
"160" [label = <(LOCAL,Pattern pattern: java.util.regex.Pattern)> ]
"161" [label = <(&lt;operator&gt;.assignment,Pattern pattern = Pattern.compile(regexTokenizer))<SUB>224</SUB>> ]
"162" [label = <(IDENTIFIER,pattern,Pattern pattern = Pattern.compile(regexTokenizer))<SUB>224</SUB>> ]
"163" [label = <(compile,Pattern.compile(regexTokenizer))<SUB>224</SUB>> ]
"164" [label = <(IDENTIFIER,Pattern,Pattern.compile(regexTokenizer))<SUB>224</SUB>> ]
"165" [label = <(IDENTIFIER,regexTokenizer,Pattern.compile(regexTokenizer))<SUB>224</SUB>> ]
"166" [label = <(RETURN,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012};,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012};)<SUB>225</SUB>> ]
"167" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>225</SUB>> ]
"168" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"169" [label = <(IDENTIFIER,$obj10,&lt;empty&gt;)> ]
"170" [label = <(&lt;operator&gt;.alloc,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})<SUB>225</SUB>> ]
"171" [label = <(&lt;init&gt;,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})<SUB>225</SUB>> ]
"172" [label = <(IDENTIFIER,$obj10,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})> ]
"173" [label = <(IDENTIFIER,$obj10,&lt;empty&gt;)> ]
"174" [label = <(MODIFIER,PUBLIC)> ]
"175" [label = <(MODIFIER,STATIC)> ]
"176" [label = <(METHOD_RETURN,ANY)<SUB>223</SUB>> ]
  "156" -> "157" 
  "156" -> "158" 
  "156" -> "159" 
  "156" -> "174" 
  "156" -> "175" 
  "156" -> "176" 
  "159" -> "160" 
  "159" -> "161" 
  "159" -> "166" 
  "161" -> "162" 
  "161" -> "163" 
  "163" -> "164" 
  "163" -> "165" 
  "166" -> "167" 
  "167" -> "168" 
  "167" -> "171" 
  "167" -> "173" 
  "168" -> "169" 
  "168" -> "170" 
  "171" -> "172" 
}
