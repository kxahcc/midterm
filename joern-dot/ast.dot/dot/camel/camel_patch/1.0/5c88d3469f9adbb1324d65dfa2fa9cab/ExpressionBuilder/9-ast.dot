digraph "tokenizeExpression" {  
"141" [label = <(METHOD,tokenizeExpression)<SUB>198</SUB>> ]
"142" [label = <(PARAM,final Expression&lt;E&gt; expression)<SUB>198</SUB>> ]
"143" [label = <(PARAM,final String token)<SUB>198</SUB>> ]
"144" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>198</SUB>> ]
"145" [label = <(RETURN,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        StringTokenizer iter = new StringTokenizer(text, token);\012        List&lt;String&gt; answer = new ArrayList&lt;String&gt;();\012        while (iter.hasMoreTokens()) {\012            answer.add(iter.nextToken());\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;tokenize(&quot; + expression + &quot;, &quot; + token + &quot;)&quot;;\012    }\012};,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        StringTokenizer iter = new StringTokenizer(text, token);\012        List&lt;String&gt; answer = new ArrayList&lt;String&gt;();\012        while (iter.hasMoreTokens()) {\012            answer.add(iter.nextToken());\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;tokenize(&quot; + expression + &quot;, &quot; + token + &quot;)&quot;;\012    }\012};)<SUB>199</SUB>> ]
"146" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>199</SUB>> ]
"147" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"148" [label = <(IDENTIFIER,$obj9,&lt;empty&gt;)> ]
"149" [label = <(&lt;operator&gt;.alloc,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        StringTokenizer iter = new StringTokenizer(text, token);\012        List&lt;String&gt; answer = new ArrayList&lt;String&gt;();\012        while (iter.hasMoreTokens()) {\012            answer.add(iter.nextToken());\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;tokenize(&quot; + expression + &quot;, &quot; + token + &quot;)&quot;;\012    }\012})<SUB>199</SUB>> ]
"150" [label = <(&lt;init&gt;,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        StringTokenizer iter = new StringTokenizer(text, token);\012        List&lt;String&gt; answer = new ArrayList&lt;String&gt;();\012        while (iter.hasMoreTokens()) {\012            answer.add(iter.nextToken());\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;tokenize(&quot; + expression + &quot;, &quot; + token + &quot;)&quot;;\012    }\012})<SUB>199</SUB>> ]
"151" [label = <(IDENTIFIER,$obj9,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        StringTokenizer iter = new StringTokenizer(text, token);\012        List&lt;String&gt; answer = new ArrayList&lt;String&gt;();\012        while (iter.hasMoreTokens()) {\012            answer.add(iter.nextToken());\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;tokenize(&quot; + expression + &quot;, &quot; + token + &quot;)&quot;;\012    }\012})> ]
"152" [label = <(IDENTIFIER,$obj9,&lt;empty&gt;)> ]
"153" [label = <(MODIFIER,PUBLIC)> ]
"154" [label = <(MODIFIER,STATIC)> ]
"155" [label = <(METHOD_RETURN,ANY)<SUB>198</SUB>> ]
  "141" -> "142" 
  "141" -> "143" 
  "141" -> "144" 
  "141" -> "153" 
  "141" -> "154" 
  "141" -> "155" 
  "144" -> "145" 
  "145" -> "146" 
  "146" -> "147" 
  "146" -> "150" 
  "146" -> "152" 
  "147" -> "148" 
  "147" -> "149" 
  "150" -> "151" 
}
