digraph "bodyAs" {  
"101" [label = <(METHOD,bodyAs)<SUB>73</SUB>> ]
"11" [label = <(PARAM,this)<SUB>73</SUB>> ]
"102" [label = <(PARAM,@FluentArg(&quot;class&quot;) Class&lt;T&gt; type)<SUB>74</SUB>> ]
"103" [label = <(ANNOTATION,@FluentArg(&quot;class&quot;),@FluentArg(&quot;class&quot;))<SUB>74</SUB>> ]
"104" [label = <(ANNOTATION_PARAMETER_ASSIGN,&quot;class&quot;)> ]
"105" [label = <(ANNOTATION_PARAMETER,value)> ]
"106" [label = <(ANNOTATION_LITERAL,class,class)> ]
"107" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>74</SUB>> ]
"108" [label = <(LOCAL,Expression&lt;E&gt; expression: ANY)> ]
"109" [label = <(&lt;operator&gt;.assignment,ANY expression = bodyExpression(type))<SUB>75</SUB>> ]
"110" [label = <(IDENTIFIER,expression,ANY expression = bodyExpression(type))<SUB>75</SUB>> ]
"111" [label = <(bodyExpression,bodyExpression(type))<SUB>75</SUB>> ]
"10" [label = <(IDENTIFIER,this,bodyExpression(type))<SUB>75</SUB>> ]
"112" [label = <(IDENTIFIER,type,bodyExpression(type))<SUB>75</SUB>> ]
"113" [label = <(RETURN,return new PredicateValueBuilder(expression);,return new PredicateValueBuilder(expression);)<SUB>76</SUB>> ]
"114" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>76</SUB>> ]
"115" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"116" [label = <(IDENTIFIER,$obj3,&lt;empty&gt;)> ]
"117" [label = <(&lt;operator&gt;.alloc,new PredicateValueBuilder(expression))<SUB>76</SUB>> ]
"118" [label = <(&lt;init&gt;,new PredicateValueBuilder(expression))<SUB>76</SUB>> ]
"119" [label = <(IDENTIFIER,$obj3,new PredicateValueBuilder(expression))> ]
"120" [label = <(IDENTIFIER,expression,new PredicateValueBuilder(expression))<SUB>76</SUB>> ]
"121" [label = <(IDENTIFIER,$obj3,&lt;empty&gt;)> ]
"122" [label = <(MODIFIER,PUBLIC)> ]
"123" [label = <(MODIFIER,VIRTUAL)> ]
"124" [label = <(ANNOTATION,@Fluent,@Fluent)<SUB>73</SUB>> ]
"125" [label = <(METHOD_RETURN,org.apache.camel.component.mock.AssertionClause$PredicateValueBuilder)<SUB>74</SUB>> ]
  "101" -> "11" 
  "101" -> "102" 
  "101" -> "107" 
  "101" -> "122" 
  "101" -> "123" 
  "101" -> "124" 
  "101" -> "125" 
  "102" -> "103" 
  "103" -> "104" 
  "104" -> "105" 
  "104" -> "106" 
  "107" -> "108" 
  "107" -> "109" 
  "107" -> "113" 
  "109" -> "110" 
  "109" -> "111" 
  "111" -> "10" 
  "111" -> "112" 
  "113" -> "114" 
  "114" -> "115" 
  "114" -> "118" 
  "114" -> "121" 
  "115" -> "116" 
  "115" -> "117" 
  "118" -> "119" 
  "118" -> "120" 
}
