digraph "regex" {  
"246" [label = <(METHOD,regex)<SUB>213</SUB>> ]
"247" [label = <(PARAM,final Expression&lt;E&gt; expression)<SUB>213</SUB>> ]
"248" [label = <(PARAM,final Pattern pattern)<SUB>213</SUB>> ]
"249" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>213</SUB>> ]
"250" [label = <(notNull,notNull(expression, &quot;expression&quot;))<SUB>214</SUB>> ]
"251" [label = <(IDENTIFIER,this,notNull(expression, &quot;expression&quot;))<SUB>214</SUB>> ]
"252" [label = <(IDENTIFIER,expression,notNull(expression, &quot;expression&quot;))<SUB>214</SUB>> ]
"253" [label = <(LITERAL,&quot;expression&quot;,notNull(expression, &quot;expression&quot;))<SUB>214</SUB>> ]
"254" [label = <(notNull,notNull(pattern, &quot;pattern&quot;))<SUB>215</SUB>> ]
"255" [label = <(IDENTIFIER,this,notNull(pattern, &quot;pattern&quot;))<SUB>215</SUB>> ]
"256" [label = <(IDENTIFIER,pattern,notNull(pattern, &quot;pattern&quot;))<SUB>215</SUB>> ]
"257" [label = <(LITERAL,&quot;pattern&quot;,notNull(pattern, &quot;pattern&quot;))<SUB>215</SUB>> ]
"258" [label = <(RETURN,return new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012};,return new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012};)<SUB>217</SUB>> ]
"259" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>217</SUB>> ]
"260" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"261" [label = <(IDENTIFIER,$obj10,&lt;empty&gt;)> ]
"262" [label = <(&lt;operator&gt;.alloc,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})<SUB>217</SUB>> ]
"263" [label = <(&lt;init&gt;,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})<SUB>217</SUB>> ]
"264" [label = <(IDENTIFIER,$obj10,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})> ]
"265" [label = <(IDENTIFIER,$obj10,&lt;empty&gt;)> ]
"266" [label = <(MODIFIER,PUBLIC)> ]
"267" [label = <(MODIFIER,STATIC)> ]
"268" [label = <(METHOD_RETURN,ANY)<SUB>213</SUB>> ]
  "246" -> "247" 
  "246" -> "248" 
  "246" -> "249" 
  "246" -> "266" 
  "246" -> "267" 
  "246" -> "268" 
  "249" -> "250" 
  "249" -> "254" 
  "249" -> "258" 
  "250" -> "251" 
  "250" -> "252" 
  "250" -> "253" 
  "254" -> "255" 
  "254" -> "256" 
  "254" -> "257" 
  "258" -> "259" 
  "259" -> "260" 
  "259" -> "263" 
  "259" -> "265" 
  "260" -> "261" 
  "260" -> "262" 
  "263" -> "264" 
}
