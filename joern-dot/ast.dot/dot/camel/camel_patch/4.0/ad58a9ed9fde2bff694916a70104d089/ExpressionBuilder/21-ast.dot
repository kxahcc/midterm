digraph "regexTokenize" {  
"293" [label = <(METHOD,regexTokenize)<SUB>428</SUB>> ]
"294" [label = <(PARAM,final Expression&lt;E&gt; expression)<SUB>428</SUB>> ]
"295" [label = <(PARAM,String regexTokenizer)<SUB>429</SUB>> ]
"296" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>429</SUB>> ]
"297" [label = <(LOCAL,Pattern pattern: java.util.regex.Pattern)> ]
"298" [label = <(&lt;operator&gt;.assignment,Pattern pattern = Pattern.compile(regexTokenizer))<SUB>430</SUB>> ]
"299" [label = <(IDENTIFIER,pattern,Pattern pattern = Pattern.compile(regexTokenizer))<SUB>430</SUB>> ]
"300" [label = <(compile,Pattern.compile(regexTokenizer))<SUB>430</SUB>> ]
"301" [label = <(IDENTIFIER,Pattern,Pattern.compile(regexTokenizer))<SUB>430</SUB>> ]
"302" [label = <(IDENTIFIER,regexTokenizer,Pattern.compile(regexTokenizer))<SUB>430</SUB>> ]
"303" [label = <(RETURN,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012};,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012};)<SUB>431</SUB>> ]
"304" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>431</SUB>> ]
"305" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"306" [label = <(IDENTIFIER,$obj19,&lt;empty&gt;)> ]
"307" [label = <(&lt;operator&gt;.alloc,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})<SUB>431</SUB>> ]
"308" [label = <(&lt;init&gt;,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})<SUB>431</SUB>> ]
"309" [label = <(IDENTIFIER,$obj19,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})> ]
"310" [label = <(IDENTIFIER,$obj19,&lt;empty&gt;)> ]
"311" [label = <(MODIFIER,PUBLIC)> ]
"312" [label = <(MODIFIER,STATIC)> ]
"313" [label = <(METHOD_RETURN,ANY)<SUB>428</SUB>> ]
  "293" -> "294" 
  "293" -> "295" 
  "293" -> "296" 
  "293" -> "311" 
  "293" -> "312" 
  "293" -> "313" 
  "296" -> "297" 
  "296" -> "298" 
  "296" -> "303" 
  "298" -> "299" 
  "298" -> "300" 
  "300" -> "301" 
  "300" -> "302" 
  "303" -> "304" 
  "304" -> "305" 
  "304" -> "308" 
  "304" -> "310" 
  "305" -> "306" 
  "305" -> "307" 
  "308" -> "309" 
}
