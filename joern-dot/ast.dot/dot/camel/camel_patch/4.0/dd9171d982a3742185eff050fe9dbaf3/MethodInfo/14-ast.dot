digraph "createParametersExpression" {  
"261" [label = <(METHOD,createParametersExpression)<SUB>127</SUB>> ]
"262" [label = <(PARAM,this)<SUB>127</SUB>> ]
"263" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>127</SUB>> ]
"264" [label = <(LOCAL,int size: int)> ]
"265" [label = <(&lt;operator&gt;.assignment,int size = size())<SUB>128</SUB>> ]
"266" [label = <(IDENTIFIER,size,int size = size())<SUB>128</SUB>> ]
"267" [label = <(size,size())<SUB>128</SUB>> ]
"268" [label = <(&lt;operator&gt;.fieldAccess,this.parameters)<SUB>128</SUB>> ]
"269" [label = <(IDENTIFIER,this,size())<SUB>128</SUB>> ]
"270" [label = <(FIELD_IDENTIFIER,parameters,parameters)<SUB>128</SUB>> ]
"271" [label = <(LOCAL,Expression[] expressions: ANY)> ]
"272" [label = <(&lt;operator&gt;.assignment,ANY expressions = new Expression[size])<SUB>129</SUB>> ]
"273" [label = <(IDENTIFIER,expressions,ANY expressions = new Expression[size])<SUB>129</SUB>> ]
"274" [label = <(&lt;operator&gt;.alloc,new Expression[size])> ]
"275" [label = <(IDENTIFIER,size,new Expression[size])<SUB>129</SUB>> ]
"276" [label = <(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; size); i++),for (int i = 0; Some(i &lt; size); i++))<SUB>130</SUB>> ]
"277" [label = <(LOCAL,int i: int)> ]
"278" [label = <(&lt;operator&gt;.assignment,int i = 0)<SUB>130</SUB>> ]
"279" [label = <(IDENTIFIER,i,int i = 0)<SUB>130</SUB>> ]
"280" [label = <(LITERAL,0,int i = 0)<SUB>130</SUB>> ]
"281" [label = <(&lt;operator&gt;.lessThan,i &lt; size)<SUB>130</SUB>> ]
"282" [label = <(IDENTIFIER,i,i &lt; size)<SUB>130</SUB>> ]
"283" [label = <(IDENTIFIER,size,i &lt; size)<SUB>130</SUB>> ]
"284" [label = <(&lt;operator&gt;.postIncrement,i++)<SUB>130</SUB>> ]
"285" [label = <(IDENTIFIER,i,i++)<SUB>130</SUB>> ]
"286" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>130</SUB>> ]
"287" [label = <(LOCAL,Expression parameterExpression: org.apache.camel.Expression)> ]
"288" [label = <(&lt;operator&gt;.assignment,Expression parameterExpression = getExpression())<SUB>131</SUB>> ]
"289" [label = <(IDENTIFIER,parameterExpression,Expression parameterExpression = getExpression())<SUB>131</SUB>> ]
"290" [label = <(getExpression,getExpression())<SUB>131</SUB>> ]
"291" [label = <(get,get(i))<SUB>131</SUB>> ]
"292" [label = <(&lt;operator&gt;.fieldAccess,this.parameters)<SUB>131</SUB>> ]
"293" [label = <(IDENTIFIER,this,get(i))<SUB>131</SUB>> ]
"294" [label = <(FIELD_IDENTIFIER,parameters,parameters)<SUB>131</SUB>> ]
"295" [label = <(IDENTIFIER,i,get(i))<SUB>131</SUB>> ]
"296" [label = <(&lt;operator&gt;.assignment,expressions[i] = parameterExpression)<SUB>132</SUB>> ]
"297" [label = <(&lt;operator&gt;.indexAccess,expressions[i])<SUB>132</SUB>> ]
"298" [label = <(IDENTIFIER,expressions,expressions[i] = parameterExpression)<SUB>132</SUB>> ]
"299" [label = <(IDENTIFIER,i,expressions[i] = parameterExpression)<SUB>132</SUB>> ]
"300" [label = <(IDENTIFIER,parameterExpression,expressions[i] = parameterExpression)<SUB>132</SUB>> ]
"301" [label = <(RETURN,return new Expression&lt;Exchange&gt;() {\012\012    public Object evaluate(Exchange exchange) {\012        Object[] answer = new Object[size];\012        for (int i = 0; i &lt; size; i++) {\012            Object value = expressions[i].evaluate(exchange);\012            Class expectedType = parameters.get(i).getType();\012            value = ExchangeHelper.convertToType(exchange, expectedType, value);\012            answer[i] = value;\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;ParametersExpression: &quot; + Arrays.asList(expressions);\012    }\012};,return new Expression&lt;Exchange&gt;() {\012\012    public Object evaluate(Exchange exchange) {\012        Object[] answer = new Object[size];\012        for (int i = 0; i &lt; size; i++) {\012            Object value = expressions[i].evaluate(exchange);\012            Class expectedType = parameters.get(i).getType();\012            value = ExchangeHelper.convertToType(exchange, expectedType, value);\012            answer[i] = value;\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;ParametersExpression: &quot; + Arrays.asList(expressions);\012    }\012};)<SUB>134</SUB>> ]
"302" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>134</SUB>> ]
"303" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"304" [label = <(IDENTIFIER,$obj1,&lt;empty&gt;)> ]
"305" [label = <(&lt;operator&gt;.alloc,new Expression&lt;Exchange&gt;() {\012\012    public Object evaluate(Exchange exchange) {\012        Object[] answer = new Object[size];\012        for (int i = 0; i &lt; size; i++) {\012            Object value = expressions[i].evaluate(exchange);\012            Class expectedType = parameters.get(i).getType();\012            value = ExchangeHelper.convertToType(exchange, expectedType, value);\012            answer[i] = value;\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;ParametersExpression: &quot; + Arrays.asList(expressions);\012    }\012})<SUB>134</SUB>> ]
"306" [label = <(&lt;init&gt;,new Expression&lt;Exchange&gt;() {\012\012    public Object evaluate(Exchange exchange) {\012        Object[] answer = new Object[size];\012        for (int i = 0; i &lt; size; i++) {\012            Object value = expressions[i].evaluate(exchange);\012            Class expectedType = parameters.get(i).getType();\012            value = ExchangeHelper.convertToType(exchange, expectedType, value);\012            answer[i] = value;\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;ParametersExpression: &quot; + Arrays.asList(expressions);\012    }\012})<SUB>134</SUB>> ]
"307" [label = <(IDENTIFIER,$obj1,new Expression&lt;Exchange&gt;() {\012\012    public Object evaluate(Exchange exchange) {\012        Object[] answer = new Object[size];\012        for (int i = 0; i &lt; size; i++) {\012            Object value = expressions[i].evaluate(exchange);\012            Class expectedType = parameters.get(i).getType();\012            value = ExchangeHelper.convertToType(exchange, expectedType, value);\012            answer[i] = value;\012        }\012        return answer;\012    }\012\012    @Override\012    public String toString() {\012        return &quot;ParametersExpression: &quot; + Arrays.asList(expressions);\012    }\012})> ]
"308" [label = <(IDENTIFIER,$obj1,&lt;empty&gt;)> ]
"309" [label = <(MODIFIER,PROTECTED)> ]
"310" [label = <(MODIFIER,VIRTUAL)> ]
"311" [label = <(METHOD_RETURN,org.apache.camel.Expression)<SUB>127</SUB>> ]
  "261" -> "262" 
  "261" -> "263" 
  "261" -> "309" 
  "261" -> "310" 
  "261" -> "311" 
  "263" -> "264" 
  "263" -> "265" 
  "263" -> "271" 
  "263" -> "272" 
  "263" -> "276" 
  "263" -> "301" 
  "265" -> "266" 
  "265" -> "267" 
  "267" -> "268" 
  "268" -> "269" 
  "268" -> "270" 
  "272" -> "273" 
  "272" -> "274" 
  "274" -> "275" 
  "276" -> "277" 
  "276" -> "278" 
  "276" -> "281" 
  "276" -> "284" 
  "276" -> "286" 
  "278" -> "279" 
  "278" -> "280" 
  "281" -> "282" 
  "281" -> "283" 
  "284" -> "285" 
  "286" -> "287" 
  "286" -> "288" 
  "286" -> "296" 
  "288" -> "289" 
  "288" -> "290" 
  "290" -> "291" 
  "291" -> "292" 
  "291" -> "295" 
  "292" -> "293" 
  "292" -> "294" 
  "296" -> "297" 
  "296" -> "300" 
  "297" -> "298" 
  "297" -> "299" 
  "301" -> "302" 
  "302" -> "303" 
  "302" -> "306" 
  "302" -> "308" 
  "303" -> "304" 
  "303" -> "305" 
  "306" -> "307" 
}
