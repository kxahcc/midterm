digraph "createIterator" {  
"545" [label = <(METHOD,createIterator)<SUB>238</SUB>> ]
"546" [label = <(PARAM,Object value)<SUB>239</SUB>> ]
"547" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>239</SUB>> ]
"548" [label = <(CONTROL_STRUCTURE,if (value == null),if (value == null))<SUB>240</SUB>> ]
"549" [label = <(&lt;operator&gt;.equals,value == null)<SUB>240</SUB>> ]
"550" [label = <(IDENTIFIER,value,value == null)<SUB>240</SUB>> ]
"551" [label = <(LITERAL,null,value == null)<SUB>240</SUB>> ]
"552" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>240</SUB>> ]
"553" [label = <(RETURN,return Collections.EMPTY_LIST.iterator();,return Collections.EMPTY_LIST.iterator();)<SUB>241</SUB>> ]
"554" [label = <(iterator,Collections.EMPTY_LIST.iterator())<SUB>241</SUB>> ]
"555" [label = <(&lt;operator&gt;.fieldAccess,Collections.EMPTY_LIST)<SUB>241</SUB>> ]
"556" [label = <(IDENTIFIER,Collections,Collections.EMPTY_LIST.iterator())<SUB>241</SUB>> ]
"557" [label = <(FIELD_IDENTIFIER,EMPTY_LIST,EMPTY_LIST)<SUB>241</SUB>> ]
"558" [label = <(CONTROL_STRUCTURE,else,else)<SUB>242</SUB>> ]
"559" [label = <(CONTROL_STRUCTURE,if (value instanceof Collection),if (value instanceof Collection))<SUB>242</SUB>> ]
"560" [label = <(&lt;operator&gt;.instanceOf,value instanceof Collection)<SUB>242</SUB>> ]
"561" [label = <(IDENTIFIER,value,value instanceof Collection)<SUB>242</SUB>> ]
"562" [label = <(TYPE_REF,Collection,Collection)<SUB>242</SUB>> ]
"563" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>242</SUB>> ]
"564" [label = <(LOCAL,Collection collection: java.util.Collection)> ]
"565" [label = <(&lt;operator&gt;.assignment,Collection collection = (Collection) value)<SUB>243</SUB>> ]
"566" [label = <(IDENTIFIER,collection,Collection collection = (Collection) value)<SUB>243</SUB>> ]
"567" [label = <(&lt;operator&gt;.cast,(Collection) value)<SUB>243</SUB>> ]
"568" [label = <(TYPE_REF,Collection,Collection)<SUB>243</SUB>> ]
"569" [label = <(IDENTIFIER,value,(Collection) value)<SUB>243</SUB>> ]
"570" [label = <(RETURN,return collection.iterator();,return collection.iterator();)<SUB>244</SUB>> ]
"571" [label = <(iterator,collection.iterator())<SUB>244</SUB>> ]
"572" [label = <(IDENTIFIER,collection,collection.iterator())<SUB>244</SUB>> ]
"573" [label = <(CONTROL_STRUCTURE,else,else)<SUB>245</SUB>> ]
"574" [label = <(CONTROL_STRUCTURE,if (value.getClass().isArray()),if (value.getClass().isArray()))<SUB>245</SUB>> ]
"575" [label = <(isArray,value.getClass().isArray())<SUB>245</SUB>> ]
"576" [label = <(getClass,value.getClass())<SUB>245</SUB>> ]
"577" [label = <(IDENTIFIER,value,value.getClass())<SUB>245</SUB>> ]
"578" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>245</SUB>> ]
"579" [label = <(LOCAL,List&lt;Object&gt; list: java.util.List)> ]
"580" [label = <(&lt;operator&gt;.assignment,List list = Arrays.asList((Object[]) value))<SUB>247</SUB>> ]
"581" [label = <(IDENTIFIER,list,List list = Arrays.asList((Object[]) value))<SUB>247</SUB>> ]
"582" [label = <(asList,Arrays.asList((Object[]) value))<SUB>247</SUB>> ]
"583" [label = <(IDENTIFIER,Arrays,Arrays.asList((Object[]) value))<SUB>247</SUB>> ]
"584" [label = <(&lt;operator&gt;.arrayInitializer,&lt;operator&gt;.arrayInitializer)<SUB>247</SUB>> ]
"585" [label = <(&lt;operator&gt;.cast,(Object[]) value)<SUB>247</SUB>> ]
"586" [label = <(TYPE_REF,Object[],Object[])<SUB>247</SUB>> ]
"587" [label = <(IDENTIFIER,value,(Object[]) value)<SUB>247</SUB>> ]
"588" [label = <(RETURN,return list.iterator();,return list.iterator();)<SUB>248</SUB>> ]
"589" [label = <(iterator,list.iterator())<SUB>248</SUB>> ]
"590" [label = <(IDENTIFIER,list,list.iterator())<SUB>248</SUB>> ]
"591" [label = <(CONTROL_STRUCTURE,else,else)<SUB>249</SUB>> ]
"592" [label = <(CONTROL_STRUCTURE,if (value instanceof NodeList),if (value instanceof NodeList))<SUB>249</SUB>> ]
"593" [label = <(&lt;operator&gt;.instanceOf,value instanceof NodeList)<SUB>249</SUB>> ]
"594" [label = <(IDENTIFIER,value,value instanceof NodeList)<SUB>249</SUB>> ]
"595" [label = <(TYPE_REF,NodeList,NodeList)<SUB>249</SUB>> ]
"596" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>249</SUB>> ]
"597" [label = <(LOCAL,NodeList nodeList: org.w3c.dom.NodeList)> ]
"598" [label = <(&lt;operator&gt;.assignment,NodeList nodeList = (NodeList) value)<SUB>251</SUB>> ]
"599" [label = <(IDENTIFIER,nodeList,NodeList nodeList = (NodeList) value)<SUB>251</SUB>> ]
"600" [label = <(&lt;operator&gt;.cast,(NodeList) value)<SUB>251</SUB>> ]
"601" [label = <(TYPE_REF,NodeList,NodeList)<SUB>251</SUB>> ]
"602" [label = <(IDENTIFIER,value,(NodeList) value)<SUB>251</SUB>> ]
"603" [label = <(RETURN,return new Iterator&lt;Node&gt;() {\012\012    int idx = -1;\012\012    public boolean hasNext() {\012        return ++idx &lt; nodeList.getLength();\012    }\012\012    public Node next() {\012        return nodeList.item(idx);\012    }\012\012    public void remove() {\012        throw new UnsupportedOperationException();\012    }\012};,return new Iterator&lt;Node&gt;() {\012\012    int idx = -1;\012\012    public boolean hasNext() {\012        return ++idx &lt; nodeList.getLength();\012    }\012\012    public Node next() {\012        return nodeList.item(idx);\012    }\012\012    public void remove() {\012        throw new UnsupportedOperationException();\012    }\012};)<SUB>252</SUB>> ]
"604" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>252</SUB>> ]
"605" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"606" [label = <(IDENTIFIER,$obj1,&lt;empty&gt;)> ]
"607" [label = <(&lt;operator&gt;.alloc,new Iterator&lt;Node&gt;() {\012\012    int idx = -1;\012\012    public boolean hasNext() {\012        return ++idx &lt; nodeList.getLength();\012    }\012\012    public Node next() {\012        return nodeList.item(idx);\012    }\012\012    public void remove() {\012        throw new UnsupportedOperationException();\012    }\012})<SUB>252</SUB>> ]
"608" [label = <(&lt;init&gt;,new Iterator&lt;Node&gt;() {\012\012    int idx = -1;\012\012    public boolean hasNext() {\012        return ++idx &lt; nodeList.getLength();\012    }\012\012    public Node next() {\012        return nodeList.item(idx);\012    }\012\012    public void remove() {\012        throw new UnsupportedOperationException();\012    }\012})<SUB>252</SUB>> ]
"609" [label = <(IDENTIFIER,$obj1,new Iterator&lt;Node&gt;() {\012\012    int idx = -1;\012\012    public boolean hasNext() {\012        return ++idx &lt; nodeList.getLength();\012    }\012\012    public Node next() {\012        return nodeList.item(idx);\012    }\012\012    public void remove() {\012        throw new UnsupportedOperationException();\012    }\012})> ]
"610" [label = <(IDENTIFIER,$obj1,&lt;empty&gt;)> ]
"611" [label = <(CONTROL_STRUCTURE,else,else)<SUB>267</SUB>> ]
"612" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>267</SUB>> ]
"613" [label = <(RETURN,return Collections.singletonList(value).iterator();,return Collections.singletonList(value).iterator();)<SUB>268</SUB>> ]
"614" [label = <(iterator,Collections.singletonList(value).iterator())<SUB>268</SUB>> ]
"615" [label = <(singletonList,Collections.singletonList(value))<SUB>268</SUB>> ]
"616" [label = <(IDENTIFIER,Collections,Collections.singletonList(value))<SUB>268</SUB>> ]
"617" [label = <(IDENTIFIER,value,Collections.singletonList(value))<SUB>268</SUB>> ]
"618" [label = <(MODIFIER,PUBLIC)> ]
"619" [label = <(MODIFIER,STATIC)> ]
"620" [label = <(ANNOTATION,@SuppressWarnings(&quot;unchecked&quot;),@SuppressWarnings(&quot;unchecked&quot;))<SUB>238</SUB>> ]
"621" [label = <(ANNOTATION_PARAMETER_ASSIGN,&quot;unchecked&quot;)> ]
"622" [label = <(ANNOTATION_PARAMETER,value)> ]
"623" [label = <(ANNOTATION_LITERAL,unchecked,unchecked)> ]
"624" [label = <(METHOD_RETURN,java.util.Iterator)<SUB>239</SUB>> ]
  "545" -> "546" 
  "545" -> "547" 
  "545" -> "618" 
  "545" -> "619" 
  "545" -> "620" 
  "545" -> "624" 
  "547" -> "548" 
  "548" -> "549" 
  "548" -> "552" 
  "548" -> "558" 
  "549" -> "550" 
  "549" -> "551" 
  "552" -> "553" 
  "553" -> "554" 
  "554" -> "555" 
  "555" -> "556" 
  "555" -> "557" 
  "558" -> "559" 
  "559" -> "560" 
  "559" -> "563" 
  "559" -> "573" 
  "560" -> "561" 
  "560" -> "562" 
  "563" -> "564" 
  "563" -> "565" 
  "563" -> "570" 
  "565" -> "566" 
  "565" -> "567" 
  "567" -> "568" 
  "567" -> "569" 
  "570" -> "571" 
  "571" -> "572" 
  "573" -> "574" 
  "574" -> "575" 
  "574" -> "578" 
  "574" -> "591" 
  "575" -> "576" 
  "576" -> "577" 
  "578" -> "579" 
  "578" -> "580" 
  "578" -> "588" 
  "580" -> "581" 
  "580" -> "582" 
  "582" -> "583" 
  "582" -> "584" 
  "584" -> "585" 
  "585" -> "586" 
  "585" -> "587" 
  "588" -> "589" 
  "589" -> "590" 
  "591" -> "592" 
  "592" -> "593" 
  "592" -> "596" 
  "592" -> "611" 
  "593" -> "594" 
  "593" -> "595" 
  "596" -> "597" 
  "596" -> "598" 
  "596" -> "603" 
  "598" -> "599" 
  "598" -> "600" 
  "600" -> "601" 
  "600" -> "602" 
  "603" -> "604" 
  "604" -> "605" 
  "604" -> "608" 
  "604" -> "610" 
  "605" -> "606" 
  "605" -> "607" 
  "608" -> "609" 
  "611" -> "612" 
  "612" -> "613" 
  "613" -> "614" 
  "614" -> "615" 
  "615" -> "616" 
  "615" -> "617" 
  "620" -> "621" 
  "621" -> "622" 
  "621" -> "623" 
}
