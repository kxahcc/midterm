digraph "getOutHeaderFunction" {  
"779" [label = <(METHOD,getOutHeaderFunction)<SUB>370</SUB>> ]
"780" [label = <(PARAM,this)<SUB>370</SUB>> ]
"781" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>370</SUB>> ]
"782" [label = <(CONTROL_STRUCTURE,if (outHeaderFunction == null),if (outHeaderFunction == null))<SUB>371</SUB>> ]
"783" [label = <(&lt;operator&gt;.equals,outHeaderFunction == null)<SUB>371</SUB>> ]
"784" [label = <(&lt;operator&gt;.fieldAccess,this.outHeaderFunction)<SUB>371</SUB>> ]
"785" [label = <(IDENTIFIER,this,outHeaderFunction == null)<SUB>371</SUB>> ]
"786" [label = <(FIELD_IDENTIFIER,outHeaderFunction,outHeaderFunction)<SUB>371</SUB>> ]
"787" [label = <(LITERAL,null,outHeaderFunction == null)<SUB>371</SUB>> ]
"788" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>371</SUB>> ]
"789" [label = <(&lt;operator&gt;.assignment,this.outHeaderFunction = new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getOut().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})<SUB>372</SUB>> ]
"790" [label = <(&lt;operator&gt;.fieldAccess,this.outHeaderFunction)<SUB>372</SUB>> ]
"791" [label = <(IDENTIFIER,this,this.outHeaderFunction = new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getOut().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})<SUB>372</SUB>> ]
"792" [label = <(FIELD_IDENTIFIER,outHeaderFunction,outHeaderFunction)<SUB>372</SUB>> ]
"793" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>372</SUB>> ]
"794" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"795" [label = <(IDENTIFIER,$obj8,&lt;empty&gt;)> ]
"796" [label = <(&lt;operator&gt;.alloc,new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getOut().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})<SUB>372</SUB>> ]
"797" [label = <(&lt;init&gt;,new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getOut().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})<SUB>372</SUB>> ]
"798" [label = <(IDENTIFIER,$obj8,new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getOut().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})> ]
"799" [label = <(IDENTIFIER,$obj8,&lt;empty&gt;)> ]
"800" [label = <(RETURN,return outHeaderFunction;,return outHeaderFunction;)<SUB>384</SUB>> ]
"801" [label = <(&lt;operator&gt;.fieldAccess,this.outHeaderFunction)<SUB>384</SUB>> ]
"802" [label = <(IDENTIFIER,this,return outHeaderFunction;)<SUB>384</SUB>> ]
"803" [label = <(FIELD_IDENTIFIER,outHeaderFunction,outHeaderFunction)<SUB>384</SUB>> ]
"804" [label = <(MODIFIER,PUBLIC)> ]
"805" [label = <(MODIFIER,VIRTUAL)> ]
"806" [label = <(METHOD_RETURN,javax.xml.xpath.XPathFunction)<SUB>370</SUB>> ]
  "779" -> "780" 
  "779" -> "781" 
  "779" -> "804" 
  "779" -> "805" 
  "779" -> "806" 
  "781" -> "782" 
  "781" -> "800" 
  "782" -> "783" 
  "782" -> "788" 
  "783" -> "784" 
  "783" -> "787" 
  "784" -> "785" 
  "784" -> "786" 
  "788" -> "789" 
  "789" -> "790" 
  "789" -> "793" 
  "790" -> "791" 
  "790" -> "792" 
  "793" -> "794" 
  "793" -> "797" 
  "793" -> "799" 
  "794" -> "795" 
  "794" -> "796" 
  "797" -> "798" 
  "800" -> "801" 
  "801" -> "802" 
  "801" -> "803" 
}
