digraph "getHeaderFunction" {  
"645" [label = <(METHOD,getHeaderFunction)<SUB>296</SUB>> ]
"646" [label = <(PARAM,this)<SUB>296</SUB>> ]
"647" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>296</SUB>> ]
"648" [label = <(CONTROL_STRUCTURE,if (headerFunction == null),if (headerFunction == null))<SUB>297</SUB>> ]
"649" [label = <(&lt;operator&gt;.equals,headerFunction == null)<SUB>297</SUB>> ]
"650" [label = <(&lt;operator&gt;.fieldAccess,this.headerFunction)<SUB>297</SUB>> ]
"651" [label = <(IDENTIFIER,this,headerFunction == null)<SUB>297</SUB>> ]
"652" [label = <(FIELD_IDENTIFIER,headerFunction,headerFunction)<SUB>297</SUB>> ]
"653" [label = <(LITERAL,null,headerFunction == null)<SUB>297</SUB>> ]
"654" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>297</SUB>> ]
"655" [label = <(&lt;operator&gt;.assignment,this.headerFunction = new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getIn().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})<SUB>298</SUB>> ]
"656" [label = <(&lt;operator&gt;.fieldAccess,this.headerFunction)<SUB>298</SUB>> ]
"657" [label = <(IDENTIFIER,this,this.headerFunction = new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getIn().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})<SUB>298</SUB>> ]
"658" [label = <(FIELD_IDENTIFIER,headerFunction,headerFunction)<SUB>298</SUB>> ]
"659" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>298</SUB>> ]
"660" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"661" [label = <(IDENTIFIER,$obj6,&lt;empty&gt;)> ]
"662" [label = <(&lt;operator&gt;.alloc,new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getIn().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})<SUB>298</SUB>> ]
"663" [label = <(&lt;init&gt;,new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getIn().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})<SUB>298</SUB>> ]
"664" [label = <(IDENTIFIER,$obj6,new XPathFunction() {\012\012    public Object evaluate(List list) throws XPathFunctionException {\012        if (exchange != null &amp;&amp; !list.isEmpty()) {\012            Object value = list.get(0);\012            if (value != null) {\012                return exchange.getIn().getHeader(value.toString());\012            }\012        }\012        return null;\012    }\012})> ]
"665" [label = <(IDENTIFIER,$obj6,&lt;empty&gt;)> ]
"666" [label = <(RETURN,return headerFunction;,return headerFunction;)<SUB>310</SUB>> ]
"667" [label = <(&lt;operator&gt;.fieldAccess,this.headerFunction)<SUB>310</SUB>> ]
"668" [label = <(IDENTIFIER,this,return headerFunction;)<SUB>310</SUB>> ]
"669" [label = <(FIELD_IDENTIFIER,headerFunction,headerFunction)<SUB>310</SUB>> ]
"670" [label = <(MODIFIER,PUBLIC)> ]
"671" [label = <(MODIFIER,VIRTUAL)> ]
"672" [label = <(METHOD_RETURN,javax.xml.xpath.XPathFunction)<SUB>296</SUB>> ]
  "645" -> "646" 
  "645" -> "647" 
  "645" -> "670" 
  "645" -> "671" 
  "645" -> "672" 
  "647" -> "648" 
  "647" -> "666" 
  "648" -> "649" 
  "648" -> "654" 
  "649" -> "650" 
  "649" -> "653" 
  "650" -> "651" 
  "650" -> "652" 
  "654" -> "655" 
  "655" -> "656" 
  "655" -> "659" 
  "656" -> "657" 
  "656" -> "658" 
  "659" -> "660" 
  "659" -> "663" 
  "659" -> "665" 
  "660" -> "661" 
  "660" -> "662" 
  "663" -> "664" 
  "666" -> "667" 
  "667" -> "668" 
  "667" -> "669" 
}
