digraph "regex" {  
"307" [label = <(METHOD,regex)<SUB>277</SUB>> ]
"308" [label = <(PARAM,final Expression&lt;E&gt; expression)<SUB>277</SUB>> ]
"309" [label = <(PARAM,final Pattern pattern)<SUB>278</SUB>> ]
"310" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>278</SUB>> ]
"311" [label = <(notNull,notNull(expression, &quot;expression&quot;))<SUB>279</SUB>> ]
"312" [label = <(IDENTIFIER,this,notNull(expression, &quot;expression&quot;))<SUB>279</SUB>> ]
"313" [label = <(IDENTIFIER,expression,notNull(expression, &quot;expression&quot;))<SUB>279</SUB>> ]
"314" [label = <(LITERAL,&quot;expression&quot;,notNull(expression, &quot;expression&quot;))<SUB>279</SUB>> ]
"315" [label = <(notNull,notNull(pattern, &quot;pattern&quot;))<SUB>280</SUB>> ]
"316" [label = <(IDENTIFIER,this,notNull(pattern, &quot;pattern&quot;))<SUB>280</SUB>> ]
"317" [label = <(IDENTIFIER,pattern,notNull(pattern, &quot;pattern&quot;))<SUB>280</SUB>> ]
"318" [label = <(LITERAL,&quot;pattern&quot;,notNull(pattern, &quot;pattern&quot;))<SUB>280</SUB>> ]
"319" [label = <(RETURN,return new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012};,return new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012};)<SUB>282</SUB>> ]
"320" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>282</SUB>> ]
"321" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"322" [label = <(IDENTIFIER,$obj12,&lt;empty&gt;)> ]
"323" [label = <(&lt;operator&gt;.alloc,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})<SUB>282</SUB>> ]
"324" [label = <(&lt;init&gt;,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})<SUB>282</SUB>> ]
"325" [label = <(IDENTIFIER,$obj12,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        if (value != null) {\012            Matcher matcher = pattern.matcher(value.toString());\012            return matcher.matches();\012        }\012        return false;\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot;.matches(&quot; + pattern + &quot;)&quot;;\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})> ]
"326" [label = <(IDENTIFIER,$obj12,&lt;empty&gt;)> ]
"327" [label = <(MODIFIER,PUBLIC)> ]
"328" [label = <(MODIFIER,STATIC)> ]
"329" [label = <(METHOD_RETURN,ANY)<SUB>277</SUB>> ]
  "307" -> "308" 
  "307" -> "309" 
  "307" -> "310" 
  "307" -> "327" 
  "307" -> "328" 
  "307" -> "329" 
  "310" -> "311" 
  "310" -> "315" 
  "310" -> "319" 
  "311" -> "312" 
  "311" -> "313" 
  "311" -> "314" 
  "315" -> "316" 
  "315" -> "317" 
  "315" -> "318" 
  "319" -> "320" 
  "320" -> "321" 
  "320" -> "324" 
  "320" -> "326" 
  "321" -> "322" 
  "321" -> "323" 
  "324" -> "325" 
}
