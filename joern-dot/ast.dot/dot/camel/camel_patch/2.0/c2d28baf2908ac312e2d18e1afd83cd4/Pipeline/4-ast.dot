digraph "process" {  
"177" [label = <(METHOD,process)<SUB>102</SUB>> ]
"178" [label = <(PARAM,this)<SUB>102</SUB>> ]
"179" [label = <(PARAM,final Exchange original)<SUB>102</SUB>> ]
"180" [label = <(PARAM,final Exchange exchange)<SUB>102</SUB>> ]
"181" [label = <(PARAM,final AsyncCallback callback)<SUB>102</SUB>> ]
"182" [label = <(PARAM,final Iterator&lt;Processor&gt; processors)<SUB>102</SUB>> ]
"183" [label = <(PARAM,AsyncProcessor processor)<SUB>102</SUB>> ]
"184" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>102</SUB>> ]
"185" [label = <(RETURN,return processor.process(exchange, new AsyncCallback() {\012\012    public void done(boolean sync) {\012        if (sync) {\012            return;\012        }\012        Exchange nextExchange = exchange;\012        while (processors.hasNext()) {\012            AsyncProcessor processor = AsyncProcessorTypeConverter.convert(processors.next());\012            if (nextExchange.isFailed()) {\012                if (LOG.isDebugEnabled()) {\012                    LOG.debug(&quot;Mesage exchange has failed so breaking out of pipeline: &quot; + nextExchange + &quot; exception: &quot; + nextExchange.getException() + &quot; fault: &quot; + nextExchange.getFault(false));\012                }\012                break;\012            }\012            nextExchange = createNextExchange(processor, exchange);\012            sync = process(original, nextExchange, callback, processors, processor);\012            if (!sync) {\012                return;\012            }\012        }\012        ExchangeHelper.copyResults(original, nextExchange);\012        callback.done(false);\012    }\012});,return processor.process(exchange, new AsyncCallback() {\012\012    public void done(boolean sync) {\012        if (sync) {\012            return;\012        }\012        Exchange nextExchange = exchange;\012        while (processors.hasNext()) {\012            AsyncProcessor processor = AsyncProcessorTypeConverter.convert(processors.next());\012            if (nextExchange.isFailed()) {\012                if (LOG.isDebugEnabled()) {\012                    LOG.debug(&quot;Mesage exchange has failed so breaking out of pipeline: &quot; + nextExchange + &quot; exception: &quot; + nextExchange.getException() + &quot; fault: &quot; + nextExchange.getFault(false));\012                }\012                break;\012            }\012            nextExchange = createNextExchange(processor, exchange);\012            sync = process(original, nextExchange, callback, processors, processor);\012            if (!sync) {\012                return;\012            }\012        }\012        ExchangeHelper.copyResults(original, nextExchange);\012        callback.done(false);\012    }\012});)<SUB>103</SUB>> ]
"186" [label = <(process,process(exchange, new AsyncCallback() {\012\012    public void done(boolean sync) {\012        if (sync) {\012            return;\012        }\012        Exchange nextExchange = exchange;\012        while (processors.hasNext()) {\012            AsyncProcessor processor = AsyncProcessorTypeConverter.convert(processors.next());\012            if (nextExchange.isFailed()) {\012                if (LOG.isDebugEnabled()) {\012                    LOG.debug(&quot;Mesage exchange has failed so breaking out of pipeline: &quot; + nextExchange + &quot; exception: &quot; + nextExchange.getException() + &quot; fault: &quot; + nextExchange.getFault(false));\012                }\012                break;\012            }\012            nextExchange = createNextExchange(processor, exchange);\012            sync = process(original, nextExchange, callback, processors, processor);\012            if (!sync) {\012                return;\012            }\012        }\012        ExchangeHelper.copyResults(original, nextExchange);\012        callback.done(false);\012    }\012}))<SUB>103</SUB>> ]
"187" [label = <(IDENTIFIER,processor,process(exchange, new AsyncCallback() {\012\012    public void done(boolean sync) {\012        if (sync) {\012            return;\012        }\012        Exchange nextExchange = exchange;\012        while (processors.hasNext()) {\012            AsyncProcessor processor = AsyncProcessorTypeConverter.convert(processors.next());\012            if (nextExchange.isFailed()) {\012                if (LOG.isDebugEnabled()) {\012                    LOG.debug(&quot;Mesage exchange has failed so breaking out of pipeline: &quot; + nextExchange + &quot; exception: &quot; + nextExchange.getException() + &quot; fault: &quot; + nextExchange.getFault(false));\012                }\012                break;\012            }\012            nextExchange = createNextExchange(processor, exchange);\012            sync = process(original, nextExchange, callback, processors, processor);\012            if (!sync) {\012                return;\012            }\012        }\012        ExchangeHelper.copyResults(original, nextExchange);\012        callback.done(false);\012    }\012}))<SUB>103</SUB>> ]
"188" [label = <(IDENTIFIER,exchange,process(exchange, new AsyncCallback() {\012\012    public void done(boolean sync) {\012        if (sync) {\012            return;\012        }\012        Exchange nextExchange = exchange;\012        while (processors.hasNext()) {\012            AsyncProcessor processor = AsyncProcessorTypeConverter.convert(processors.next());\012            if (nextExchange.isFailed()) {\012                if (LOG.isDebugEnabled()) {\012                    LOG.debug(&quot;Mesage exchange has failed so breaking out of pipeline: &quot; + nextExchange + &quot; exception: &quot; + nextExchange.getException() + &quot; fault: &quot; + nextExchange.getFault(false));\012                }\012                break;\012            }\012            nextExchange = createNextExchange(processor, exchange);\012            sync = process(original, nextExchange, callback, processors, processor);\012            if (!sync) {\012                return;\012            }\012        }\012        ExchangeHelper.copyResults(original, nextExchange);\012        callback.done(false);\012    }\012}))<SUB>103</SUB>> ]
"189" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>103</SUB>> ]
"190" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"191" [label = <(IDENTIFIER,$obj1,&lt;empty&gt;)> ]
"192" [label = <(&lt;operator&gt;.alloc,new AsyncCallback() {\012\012    public void done(boolean sync) {\012        if (sync) {\012            return;\012        }\012        Exchange nextExchange = exchange;\012        while (processors.hasNext()) {\012            AsyncProcessor processor = AsyncProcessorTypeConverter.convert(processors.next());\012            if (nextExchange.isFailed()) {\012                if (LOG.isDebugEnabled()) {\012                    LOG.debug(&quot;Mesage exchange has failed so breaking out of pipeline: &quot; + nextExchange + &quot; exception: &quot; + nextExchange.getException() + &quot; fault: &quot; + nextExchange.getFault(false));\012                }\012                break;\012            }\012            nextExchange = createNextExchange(processor, exchange);\012            sync = process(original, nextExchange, callback, processors, processor);\012            if (!sync) {\012                return;\012            }\012        }\012        ExchangeHelper.copyResults(original, nextExchange);\012        callback.done(false);\012    }\012})<SUB>103</SUB>> ]
"193" [label = <(&lt;init&gt;,new AsyncCallback() {\012\012    public void done(boolean sync) {\012        if (sync) {\012            return;\012        }\012        Exchange nextExchange = exchange;\012        while (processors.hasNext()) {\012            AsyncProcessor processor = AsyncProcessorTypeConverter.convert(processors.next());\012            if (nextExchange.isFailed()) {\012                if (LOG.isDebugEnabled()) {\012                    LOG.debug(&quot;Mesage exchange has failed so breaking out of pipeline: &quot; + nextExchange + &quot; exception: &quot; + nextExchange.getException() + &quot; fault: &quot; + nextExchange.getFault(false));\012                }\012                break;\012            }\012            nextExchange = createNextExchange(processor, exchange);\012            sync = process(original, nextExchange, callback, processors, processor);\012            if (!sync) {\012                return;\012            }\012        }\012        ExchangeHelper.copyResults(original, nextExchange);\012        callback.done(false);\012    }\012})<SUB>103</SUB>> ]
"194" [label = <(IDENTIFIER,$obj1,new AsyncCallback() {\012\012    public void done(boolean sync) {\012        if (sync) {\012            return;\012        }\012        Exchange nextExchange = exchange;\012        while (processors.hasNext()) {\012            AsyncProcessor processor = AsyncProcessorTypeConverter.convert(processors.next());\012            if (nextExchange.isFailed()) {\012                if (LOG.isDebugEnabled()) {\012                    LOG.debug(&quot;Mesage exchange has failed so breaking out of pipeline: &quot; + nextExchange + &quot; exception: &quot; + nextExchange.getException() + &quot; fault: &quot; + nextExchange.getFault(false));\012                }\012                break;\012            }\012            nextExchange = createNextExchange(processor, exchange);\012            sync = process(original, nextExchange, callback, processors, processor);\012            if (!sync) {\012                return;\012            }\012        }\012        ExchangeHelper.copyResults(original, nextExchange);\012        callback.done(false);\012    }\012})> ]
"195" [label = <(IDENTIFIER,$obj1,&lt;empty&gt;)> ]
"196" [label = <(MODIFIER,PRIVATE)> ]
"197" [label = <(MODIFIER,VIRTUAL)> ]
"198" [label = <(METHOD_RETURN,boolean)<SUB>102</SUB>> ]
  "177" -> "178" 
  "177" -> "179" 
  "177" -> "180" 
  "177" -> "181" 
  "177" -> "182" 
  "177" -> "183" 
  "177" -> "184" 
  "177" -> "196" 
  "177" -> "197" 
  "177" -> "198" 
  "184" -> "185" 
  "185" -> "186" 
  "186" -> "187" 
  "186" -> "188" 
  "186" -> "189" 
  "189" -> "190" 
  "189" -> "193" 
  "189" -> "195" 
  "190" -> "191" 
  "190" -> "192" 
  "193" -> "194" 
}
