digraph "createDefaultFunctionResolver" {  
"1113" [label = <(METHOD,createDefaultFunctionResolver)<SUB>487</SUB>> ]
"1114" [label = <(PARAM,this)<SUB>487</SUB>> ]
"1115" [label = <(PARAM,final XPathFunctionResolver parent)<SUB>487</SUB>> ]
"1116" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>487</SUB>> ]
"1117" [label = <(RETURN,return new XPathFunctionResolver() {\012\012    public XPathFunction resolveFunction(QName qName, int argumentCount) {\012        XPathFunction answer = null;\012        if (parent != null) {\012            answer = parent.resolveFunction(qName, argumentCount);\012        }\012        if (answer == null) {\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), IN_NAMESPACE) || isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), DEFAULT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getHeaderFunction();\012                }\012            }\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), OUT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getOutBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getOutHeaderFunction();\012                }\012            }\012        }\012        return answer;\012    }\012};,return new XPathFunctionResolver() {\012\012    public XPathFunction resolveFunction(QName qName, int argumentCount) {\012        XPathFunction answer = null;\012        if (parent != null) {\012            answer = parent.resolveFunction(qName, argumentCount);\012        }\012        if (answer == null) {\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), IN_NAMESPACE) || isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), DEFAULT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getHeaderFunction();\012                }\012            }\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), OUT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getOutBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getOutHeaderFunction();\012                }\012            }\012        }\012        return answer;\012    }\012};)<SUB>488</SUB>> ]
"1118" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>488</SUB>> ]
"1119" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1120" [label = <(IDENTIFIER,$obj11,&lt;empty&gt;)> ]
"1121" [label = <(&lt;operator&gt;.alloc,new XPathFunctionResolver() {\012\012    public XPathFunction resolveFunction(QName qName, int argumentCount) {\012        XPathFunction answer = null;\012        if (parent != null) {\012            answer = parent.resolveFunction(qName, argumentCount);\012        }\012        if (answer == null) {\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), IN_NAMESPACE) || isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), DEFAULT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getHeaderFunction();\012                }\012            }\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), OUT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getOutBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getOutHeaderFunction();\012                }\012            }\012        }\012        return answer;\012    }\012})<SUB>488</SUB>> ]
"1122" [label = <(&lt;init&gt;,new XPathFunctionResolver() {\012\012    public XPathFunction resolveFunction(QName qName, int argumentCount) {\012        XPathFunction answer = null;\012        if (parent != null) {\012            answer = parent.resolveFunction(qName, argumentCount);\012        }\012        if (answer == null) {\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), IN_NAMESPACE) || isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), DEFAULT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getHeaderFunction();\012                }\012            }\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), OUT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getOutBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getOutHeaderFunction();\012                }\012            }\012        }\012        return answer;\012    }\012})<SUB>488</SUB>> ]
"1123" [label = <(IDENTIFIER,$obj11,new XPathFunctionResolver() {\012\012    public XPathFunction resolveFunction(QName qName, int argumentCount) {\012        XPathFunction answer = null;\012        if (parent != null) {\012            answer = parent.resolveFunction(qName, argumentCount);\012        }\012        if (answer == null) {\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), IN_NAMESPACE) || isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), DEFAULT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getHeaderFunction();\012                }\012            }\012            if (isMatchingNamespaceOrEmptyNamespace(qName.getNamespaceURI(), OUT_NAMESPACE)) {\012                String localPart = qName.getLocalPart();\012                if (localPart.equals(&quot;body&quot;) &amp;&amp; argumentCount == 0) {\012                    return getOutBodyFunction();\012                }\012                if (localPart.equals(&quot;header&quot;) &amp;&amp; argumentCount == 1) {\012                    return getOutHeaderFunction();\012                }\012            }\012        }\012        return answer;\012    }\012})> ]
"1124" [label = <(IDENTIFIER,$obj11,&lt;empty&gt;)> ]
"1125" [label = <(MODIFIER,PROTECTED)> ]
"1126" [label = <(MODIFIER,VIRTUAL)> ]
"1127" [label = <(METHOD_RETURN,javax.xml.xpath.XPathFunctionResolver)<SUB>487</SUB>> ]
  "1113" -> "1114" 
  "1113" -> "1115" 
  "1113" -> "1116" 
  "1113" -> "1125" 
  "1113" -> "1126" 
  "1113" -> "1127" 
  "1116" -> "1117" 
  "1117" -> "1118" 
  "1118" -> "1119" 
  "1118" -> "1122" 
  "1118" -> "1124" 
  "1119" -> "1120" 
  "1119" -> "1121" 
  "1122" -> "1123" 
}
