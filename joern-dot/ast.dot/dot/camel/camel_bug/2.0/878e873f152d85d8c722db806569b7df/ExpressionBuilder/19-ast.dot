digraph "regexTokenize" {  
"266" [label = <(METHOD,regexTokenize)<SUB>380</SUB>> ]
"267" [label = <(PARAM,final Expression&lt;E&gt; expression)<SUB>380</SUB>> ]
"268" [label = <(PARAM,String regexTokenizer)<SUB>381</SUB>> ]
"269" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>381</SUB>> ]
"270" [label = <(LOCAL,Pattern pattern: java.util.regex.Pattern)> ]
"271" [label = <(&lt;operator&gt;.assignment,Pattern pattern = Pattern.compile(regexTokenizer))<SUB>382</SUB>> ]
"272" [label = <(IDENTIFIER,pattern,Pattern pattern = Pattern.compile(regexTokenizer))<SUB>382</SUB>> ]
"273" [label = <(compile,Pattern.compile(regexTokenizer))<SUB>382</SUB>> ]
"274" [label = <(IDENTIFIER,Pattern,Pattern.compile(regexTokenizer))<SUB>382</SUB>> ]
"275" [label = <(IDENTIFIER,regexTokenizer,Pattern.compile(regexTokenizer))<SUB>382</SUB>> ]
"276" [label = <(RETURN,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012};,return new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012};)<SUB>383</SUB>> ]
"277" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>383</SUB>> ]
"278" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"279" [label = <(IDENTIFIER,$obj17,&lt;empty&gt;)> ]
"280" [label = <(&lt;operator&gt;.alloc,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})<SUB>383</SUB>> ]
"281" [label = <(&lt;init&gt;,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})<SUB>383</SUB>> ]
"282" [label = <(IDENTIFIER,$obj17,new Expression&lt;E&gt;() {\012\012    public Object evaluate(E exchange) {\012        String text = evaluateStringExpression(expression, exchange);\012        if (text == null) {\012            return null;\012        }\012        return Arrays.asList(pattern.split(text));\012    }\012\012    @Override\012    public String toString() {\012        return &quot;regexTokenize(&quot; + expression + &quot;, &quot; + pattern.pattern() + &quot;)&quot;;\012    }\012})> ]
"283" [label = <(IDENTIFIER,$obj17,&lt;empty&gt;)> ]
"284" [label = <(MODIFIER,PUBLIC)> ]
"285" [label = <(MODIFIER,STATIC)> ]
"286" [label = <(METHOD_RETURN,ANY)<SUB>380</SUB>> ]
  "266" -> "267" 
  "266" -> "268" 
  "266" -> "269" 
  "266" -> "284" 
  "266" -> "285" 
  "266" -> "286" 
  "269" -> "270" 
  "269" -> "271" 
  "269" -> "276" 
  "271" -> "272" 
  "271" -> "273" 
  "273" -> "274" 
  "273" -> "275" 
  "276" -> "277" 
  "277" -> "278" 
  "277" -> "281" 
  "277" -> "283" 
  "278" -> "279" 
  "278" -> "280" 
  "281" -> "282" 
}
