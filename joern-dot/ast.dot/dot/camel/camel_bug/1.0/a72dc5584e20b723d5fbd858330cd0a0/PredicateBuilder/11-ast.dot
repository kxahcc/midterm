digraph "isInstanceOf" {  
"208" [label = <(METHOD,isInstanceOf)<SUB>172</SUB>> ]
"209" [label = <(PARAM,final Expression&lt;E&gt; expression)<SUB>172</SUB>> ]
"210" [label = <(PARAM,final Class type)<SUB>172</SUB>> ]
"211" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>172</SUB>> ]
"212" [label = <(notNull,notNull(expression, &quot;expression&quot;))<SUB>173</SUB>> ]
"213" [label = <(IDENTIFIER,this,notNull(expression, &quot;expression&quot;))<SUB>173</SUB>> ]
"214" [label = <(IDENTIFIER,expression,notNull(expression, &quot;expression&quot;))<SUB>173</SUB>> ]
"215" [label = <(LITERAL,&quot;expression&quot;,notNull(expression, &quot;expression&quot;))<SUB>173</SUB>> ]
"216" [label = <(notNull,notNull(type, &quot;type&quot;))<SUB>174</SUB>> ]
"217" [label = <(IDENTIFIER,this,notNull(type, &quot;type&quot;))<SUB>174</SUB>> ]
"218" [label = <(IDENTIFIER,type,notNull(type, &quot;type&quot;))<SUB>174</SUB>> ]
"219" [label = <(LITERAL,&quot;type&quot;,notNull(type, &quot;type&quot;))<SUB>174</SUB>> ]
"220" [label = <(RETURN,return new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        return type.isInstance(value);\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot; instanceof &quot; + type.getName();\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012};,return new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        return type.isInstance(value);\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot; instanceof &quot; + type.getName();\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012};)<SUB>176</SUB>> ]
"221" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>176</SUB>> ]
"222" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"223" [label = <(IDENTIFIER,$obj9,&lt;empty&gt;)> ]
"224" [label = <(&lt;operator&gt;.alloc,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        return type.isInstance(value);\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot; instanceof &quot; + type.getName();\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})<SUB>176</SUB>> ]
"225" [label = <(&lt;init&gt;,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        return type.isInstance(value);\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot; instanceof &quot; + type.getName();\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})<SUB>176</SUB>> ]
"226" [label = <(IDENTIFIER,$obj9,new PredicateSupport&lt;E&gt;() {\012\012    public boolean matches(E exchange) {\012        Object value = expression.evaluate(exchange);\012        return type.isInstance(value);\012    }\012\012    @Override\012    public String toString() {\012        return expression + &quot; instanceof &quot; + type.getName();\012    }\012\012    @Override\012    protected String assertionFailureMessage(E exchange) {\012        return super.assertionFailureMessage(exchange) + &quot; for &lt;&quot; + expression.evaluate(exchange) + &quot;&gt;&quot;;\012    }\012})> ]
"227" [label = <(IDENTIFIER,$obj9,&lt;empty&gt;)> ]
"228" [label = <(MODIFIER,PUBLIC)> ]
"229" [label = <(MODIFIER,STATIC)> ]
"230" [label = <(METHOD_RETURN,ANY)<SUB>172</SUB>> ]
  "208" -> "209" 
  "208" -> "210" 
  "208" -> "211" 
  "208" -> "228" 
  "208" -> "229" 
  "208" -> "230" 
  "211" -> "212" 
  "211" -> "216" 
  "211" -> "220" 
  "212" -> "213" 
  "212" -> "214" 
  "212" -> "215" 
  "216" -> "217" 
  "216" -> "218" 
  "216" -> "219" 
  "220" -> "221" 
  "221" -> "222" 
  "221" -> "225" 
  "221" -> "227" 
  "222" -> "223" 
  "222" -> "224" 
  "225" -> "226" 
}
