digraph "createAttributeSetter" {  
"1518" [label = <(METHOD,createAttributeSetter)<SUB>910</SUB>> ]
"1519" [label = <(PARAM,this)<SUB>910</SUB>> ]
"1520" [label = <(PARAM,final Method m)<SUB>910</SUB>> ]
"1521" [label = <(PARAM,Class arg)<SUB>911</SUB>> ]
"1522" [label = <(PARAM,final String attrName)<SUB>912</SUB>> ]
"1523" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>912</SUB>> ]
"1524" [label = <(LOCAL,Class reflectedArg: java.lang.Class)> ]
"1525" [label = <(&lt;operator&gt;.assignment,Class reflectedArg = PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class) PRIMITIVE_TYPE_MAP.get(arg) : arg)<SUB>915</SUB>> ]
"1526" [label = <(IDENTIFIER,reflectedArg,Class reflectedArg = PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class) PRIMITIVE_TYPE_MAP.get(arg) : arg)<SUB>915</SUB>> ]
"1527" [label = <(&lt;operator&gt;.conditional,PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class) PRIMITIVE_TYPE_MAP.get(arg) : arg)<SUB>915</SUB>> ]
"1528" [label = <(containsKey,PRIMITIVE_TYPE_MAP.containsKey(arg))<SUB>915</SUB>> ]
"1529" [label = <(&lt;operator&gt;.fieldAccess,IntrospectionHelper.PRIMITIVE_TYPE_MAP)<SUB>915</SUB>> ]
"1530" [label = <(IDENTIFIER,IntrospectionHelper,PRIMITIVE_TYPE_MAP.containsKey(arg))<SUB>915</SUB>> ]
"1531" [label = <(FIELD_IDENTIFIER,PRIMITIVE_TYPE_MAP,PRIMITIVE_TYPE_MAP)<SUB>915</SUB>> ]
"1532" [label = <(IDENTIFIER,arg,PRIMITIVE_TYPE_MAP.containsKey(arg))<SUB>915</SUB>> ]
"1533" [label = <(&lt;operator&gt;.cast,(Class) PRIMITIVE_TYPE_MAP.get(arg))<SUB>916</SUB>> ]
"1534" [label = <(TYPE_REF,Class,Class)<SUB>916</SUB>> ]
"1535" [label = <(get,PRIMITIVE_TYPE_MAP.get(arg))<SUB>916</SUB>> ]
"1536" [label = <(&lt;operator&gt;.fieldAccess,IntrospectionHelper.PRIMITIVE_TYPE_MAP)<SUB>916</SUB>> ]
"1537" [label = <(IDENTIFIER,IntrospectionHelper,PRIMITIVE_TYPE_MAP.get(arg))<SUB>916</SUB>> ]
"1538" [label = <(FIELD_IDENTIFIER,PRIMITIVE_TYPE_MAP,PRIMITIVE_TYPE_MAP)<SUB>916</SUB>> ]
"1539" [label = <(IDENTIFIER,arg,PRIMITIVE_TYPE_MAP.get(arg))<SUB>916</SUB>> ]
"1540" [label = <(IDENTIFIER,arg,PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class) PRIMITIVE_TYPE_MAP.get(arg) : arg)<SUB>916</SUB>> ]
"1541" [label = <(CONTROL_STRUCTURE,if (java.lang.String.class.equals(reflectedArg)),if (java.lang.String.class.equals(reflectedArg)))<SUB>919</SUB>> ]
"1542" [label = <(equals,this.equals(reflectedArg))<SUB>919</SUB>> ]
"1543" [label = <(&lt;operator&gt;.fieldAccess,java.lang.String.class)<SUB>919</SUB>> ]
"1544" [label = <(IDENTIFIER,java.lang.String,this.equals(reflectedArg))<SUB>919</SUB>> ]
"1545" [label = <(FIELD_IDENTIFIER,class,class)<SUB>919</SUB>> ]
"1546" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>919</SUB>> ]
"1547" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>919</SUB>> ]
"1548" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012};)<SUB>920</SUB>> ]
"1549" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>920</SUB>> ]
"1550" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1551" [label = <(IDENTIFIER,$obj29,&lt;empty&gt;)> ]
"1552" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012})<SUB>920</SUB>> ]
"1553" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012})<SUB>920</SUB>> ]
"1554" [label = <(IDENTIFIER,$obj29,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012})> ]
"1555" [label = <(IDENTIFIER,$obj29,&lt;empty&gt;)> ]
"1556" [label = <(CONTROL_STRUCTURE,else,else)<SUB>928</SUB>> ]
"1557" [label = <(CONTROL_STRUCTURE,if (java.lang.Character.class.equals(reflectedArg)),if (java.lang.Character.class.equals(reflectedArg)))<SUB>928</SUB>> ]
"1558" [label = <(equals,this.equals(reflectedArg))<SUB>928</SUB>> ]
"1559" [label = <(&lt;operator&gt;.fieldAccess,java.lang.Character.class)<SUB>928</SUB>> ]
"1560" [label = <(IDENTIFIER,java.lang.Character,this.equals(reflectedArg))<SUB>928</SUB>> ]
"1561" [label = <(FIELD_IDENTIFIER,class,class)<SUB>928</SUB>> ]
"1562" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>928</SUB>> ]
"1563" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>928</SUB>> ]
"1564" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        if (value.length() == 0) {\012            throw new BuildException(&quot;The value \&quot;\&quot; is not a &quot; + &quot;legal value for attribute \&quot;&quot; + attrName + &quot;\&quot;&quot;);\012        }\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        if (value.length() == 0) {\012            throw new BuildException(&quot;The value \&quot;\&quot; is not a &quot; + &quot;legal value for attribute \&quot;&quot; + attrName + &quot;\&quot;&quot;);\012        }\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012};)<SUB>929</SUB>> ]
"1565" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>929</SUB>> ]
"1566" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1567" [label = <(IDENTIFIER,$obj30,&lt;empty&gt;)> ]
"1568" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        if (value.length() == 0) {\012            throw new BuildException(&quot;The value \&quot;\&quot; is not a &quot; + &quot;legal value for attribute \&quot;&quot; + attrName + &quot;\&quot;&quot;);\012        }\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012})<SUB>929</SUB>> ]
"1569" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        if (value.length() == 0) {\012            throw new BuildException(&quot;The value \&quot;\&quot; is not a &quot; + &quot;legal value for attribute \&quot;&quot; + attrName + &quot;\&quot;&quot;);\012        }\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012})<SUB>929</SUB>> ]
"1570" [label = <(IDENTIFIER,$obj30,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        if (value.length() == 0) {\012            throw new BuildException(&quot;The value \&quot;\&quot; is not a &quot; + &quot;legal value for attribute \&quot;&quot; + attrName + &quot;\&quot;&quot;);\012        }\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012})> ]
"1571" [label = <(IDENTIFIER,$obj30,&lt;empty&gt;)> ]
"1572" [label = <(CONTROL_STRUCTURE,else,else)<SUB>943</SUB>> ]
"1573" [label = <(CONTROL_STRUCTURE,if (java.lang.Boolean.class.equals(reflectedArg)),if (java.lang.Boolean.class.equals(reflectedArg)))<SUB>943</SUB>> ]
"1574" [label = <(equals,this.equals(reflectedArg))<SUB>943</SUB>> ]
"1575" [label = <(&lt;operator&gt;.fieldAccess,java.lang.Boolean.class)<SUB>943</SUB>> ]
"1576" [label = <(IDENTIFIER,java.lang.Boolean,this.equals(reflectedArg))<SUB>943</SUB>> ]
"1577" [label = <(FIELD_IDENTIFIER,class,class)<SUB>943</SUB>> ]
"1578" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>943</SUB>> ]
"1579" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>943</SUB>> ]
"1580" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012};)<SUB>944</SUB>> ]
"1581" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>944</SUB>> ]
"1582" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1583" [label = <(IDENTIFIER,$obj31,&lt;empty&gt;)> ]
"1584" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012})<SUB>944</SUB>> ]
"1585" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012})<SUB>944</SUB>> ]
"1586" [label = <(IDENTIFIER,$obj31,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012})> ]
"1587" [label = <(IDENTIFIER,$obj31,&lt;empty&gt;)> ]
"1588" [label = <(CONTROL_STRUCTURE,else,else)<SUB>955</SUB>> ]
"1589" [label = <(CONTROL_STRUCTURE,if (java.lang.Class.class.equals(reflectedArg)),if (java.lang.Class.class.equals(reflectedArg)))<SUB>955</SUB>> ]
"1590" [label = <(equals,this.equals(reflectedArg))<SUB>955</SUB>> ]
"1591" [label = <(&lt;operator&gt;.fieldAccess,java.lang.Class.class)<SUB>955</SUB>> ]
"1592" [label = <(IDENTIFIER,java.lang.Class,this.equals(reflectedArg))<SUB>955</SUB>> ]
"1593" [label = <(FIELD_IDENTIFIER,class,class)<SUB>955</SUB>> ]
"1594" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>955</SUB>> ]
"1595" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>955</SUB>> ]
"1596" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012};)<SUB>956</SUB>> ]
"1597" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>956</SUB>> ]
"1598" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1599" [label = <(IDENTIFIER,$obj32,&lt;empty&gt;)> ]
"1600" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012})<SUB>956</SUB>> ]
"1601" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012})<SUB>956</SUB>> ]
"1602" [label = <(IDENTIFIER,$obj32,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012})> ]
"1603" [label = <(IDENTIFIER,$obj32,&lt;empty&gt;)> ]
"1604" [label = <(CONTROL_STRUCTURE,else,else)<SUB>968</SUB>> ]
"1605" [label = <(CONTROL_STRUCTURE,if (java.io.File.class.equals(reflectedArg)),if (java.io.File.class.equals(reflectedArg)))<SUB>968</SUB>> ]
"1606" [label = <(equals,this.equals(reflectedArg))<SUB>968</SUB>> ]
"1607" [label = <(&lt;operator&gt;.fieldAccess,java.io.File.class)<SUB>968</SUB>> ]
"1608" [label = <(IDENTIFIER,java.io.File,this.equals(reflectedArg))<SUB>968</SUB>> ]
"1609" [label = <(FIELD_IDENTIFIER,class,class)<SUB>968</SUB>> ]
"1610" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>968</SUB>> ]
"1611" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>968</SUB>> ]
"1612" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012};)<SUB>969</SUB>> ]
"1613" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>969</SUB>> ]
"1614" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1615" [label = <(IDENTIFIER,$obj33,&lt;empty&gt;)> ]
"1616" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012})<SUB>969</SUB>> ]
"1617" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012})<SUB>969</SUB>> ]
"1618" [label = <(IDENTIFIER,$obj33,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012})> ]
"1619" [label = <(IDENTIFIER,$obj33,&lt;empty&gt;)> ]
"1620" [label = <(CONTROL_STRUCTURE,else,else)<SUB>978</SUB>> ]
"1621" [label = <(CONTROL_STRUCTURE,if (org.apache.tools.ant.types.Path.class.equals(reflectedArg)),if (org.apache.tools.ant.types.Path.class.equals(reflectedArg)))<SUB>978</SUB>> ]
"1622" [label = <(equals,equals(reflectedArg))<SUB>978</SUB>> ]
"1623" [label = <(&lt;operator&gt;.fieldAccess,org.apache.tools.ant.types.Path.class)<SUB>978</SUB>> ]
"1624" [label = <(IDENTIFIER,org.apache.tools.ant.types.Path,equals(reflectedArg))<SUB>978</SUB>> ]
"1625" [label = <(FIELD_IDENTIFIER,class,class)<SUB>978</SUB>> ]
"1626" [label = <(IDENTIFIER,reflectedArg,equals(reflectedArg))<SUB>978</SUB>> ]
"1627" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>978</SUB>> ]
"1628" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012};)<SUB>979</SUB>> ]
"1629" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>979</SUB>> ]
"1630" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1631" [label = <(IDENTIFIER,$obj34,&lt;empty&gt;)> ]
"1632" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012})<SUB>979</SUB>> ]
"1633" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012})<SUB>979</SUB>> ]
"1634" [label = <(IDENTIFIER,$obj34,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012})> ]
"1635" [label = <(IDENTIFIER,$obj34,&lt;empty&gt;)> ]
"1636" [label = <(CONTROL_STRUCTURE,else,else)<SUB>988</SUB>> ]
"1637" [label = <(CONTROL_STRUCTURE,if (EnumeratedAttribute.class.isAssignableFrom(reflectedArg)),if (EnumeratedAttribute.class.isAssignableFrom(reflectedArg)))<SUB>988</SUB>> ]
"1638" [label = <(isAssignableFrom,isAssignableFrom(reflectedArg))<SUB>988</SUB>> ]
"1639" [label = <(&lt;operator&gt;.fieldAccess,EnumeratedAttribute.class)<SUB>988</SUB>> ]
"1640" [label = <(IDENTIFIER,EnumeratedAttribute,isAssignableFrom(reflectedArg))<SUB>988</SUB>> ]
"1641" [label = <(FIELD_IDENTIFIER,class,class)<SUB>988</SUB>> ]
"1642" [label = <(IDENTIFIER,reflectedArg,isAssignableFrom(reflectedArg))<SUB>988</SUB>> ]
"1643" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>988</SUB>> ]
"1644" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            EnumeratedAttribute ea = (EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            EnumeratedAttribute ea = (EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012};)<SUB>989</SUB>> ]
"1645" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>989</SUB>> ]
"1646" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1647" [label = <(IDENTIFIER,$obj35,&lt;empty&gt;)> ]
"1648" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            EnumeratedAttribute ea = (EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})<SUB>989</SUB>> ]
"1649" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            EnumeratedAttribute ea = (EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})<SUB>989</SUB>> ]
"1650" [label = <(IDENTIFIER,$obj35,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            EnumeratedAttribute ea = (EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})> ]
"1651" [label = <(IDENTIFIER,$obj35,&lt;empty&gt;)> ]
"1652" [label = <(CONTROL_STRUCTURE,else,else)<SUB>1006</SUB>> ]
"1653" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1006</SUB>> ]
"1654" [label = <(CONTROL_STRUCTURE,try,try)<SUB>1008</SUB>> ]
"1655" [label = <(BLOCK,try,try)<SUB>1008</SUB>> ]
"1656" [label = <(LOCAL,Constructor c: java.lang.reflect.Constructor)> ]
"1657" [label = <(&lt;operator&gt;.assignment,Constructor c = reflectedArg.getConstructor(new Class[] { java.lang.String.class }))<SUB>1009</SUB>> ]
"1658" [label = <(IDENTIFIER,c,Constructor c = reflectedArg.getConstructor(new Class[] { java.lang.String.class }))<SUB>1009</SUB>> ]
"1659" [label = <(getConstructor,reflectedArg.getConstructor(new Class[] { java.lang.String.class }))<SUB>1010</SUB>> ]
"1660" [label = <(IDENTIFIER,reflectedArg,reflectedArg.getConstructor(new Class[] { java.lang.String.class }))<SUB>1010</SUB>> ]
"1661" [label = <(&lt;operator&gt;.arrayInitializer,&lt;operator&gt;.arrayInitializer)<SUB>1010</SUB>> ]
"1662" [label = <(&lt;operator&gt;.arrayInitializer,new Class[] { java.lang.String.class })<SUB>1010</SUB>> ]
"1663" [label = <(&lt;operator&gt;.fieldAccess,java.lang.String.class)<SUB>1010</SUB>> ]
"1664" [label = <(IDENTIFIER,java.lang.String,new Class[] { java.lang.String.class })<SUB>1010</SUB>> ]
"1665" [label = <(FIELD_IDENTIFIER,class,class)<SUB>1010</SUB>> ]
"1666" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (p != null) {\012                p.setProjectReference(attribute);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (p != null) {\012                p.setProjectReference(attribute);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012};)<SUB>1012</SUB>> ]
"1667" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1012</SUB>> ]
"1668" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1669" [label = <(IDENTIFIER,$obj36,&lt;empty&gt;)> ]
"1670" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (p != null) {\012                p.setProjectReference(attribute);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})<SUB>1012</SUB>> ]
"1671" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (p != null) {\012                p.setProjectReference(attribute);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})<SUB>1012</SUB>> ]
"1672" [label = <(IDENTIFIER,$obj36,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (p != null) {\012                p.setProjectReference(attribute);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})> ]
"1673" [label = <(IDENTIFIER,$obj36,&lt;empty&gt;)> ]
"1674" [label = <(BLOCK,catch,catch)> ]
"1675" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1029</SUB>> ]
"1676" [label = <(RETURN,return null;,return null;)<SUB>1034</SUB>> ]
"1677" [label = <(LITERAL,null,return null;)<SUB>1034</SUB>> ]
"1678" [label = <(MODIFIER,PRIVATE)> ]
"1679" [label = <(MODIFIER,VIRTUAL)> ]
"1680" [label = <(METHOD_RETURN,org.apache.tools.ant.IntrospectionHelper$AttributeSetter)<SUB>910</SUB>> ]
  "1518" -> "1519" 
  "1518" -> "1520" 
  "1518" -> "1521" 
  "1518" -> "1522" 
  "1518" -> "1523" 
  "1518" -> "1678" 
  "1518" -> "1679" 
  "1518" -> "1680" 
  "1523" -> "1524" 
  "1523" -> "1525" 
  "1523" -> "1541" 
  "1523" -> "1676" 
  "1525" -> "1526" 
  "1525" -> "1527" 
  "1527" -> "1528" 
  "1527" -> "1533" 
  "1527" -> "1540" 
  "1528" -> "1529" 
  "1528" -> "1532" 
  "1529" -> "1530" 
  "1529" -> "1531" 
  "1533" -> "1534" 
  "1533" -> "1535" 
  "1535" -> "1536" 
  "1535" -> "1539" 
  "1536" -> "1537" 
  "1536" -> "1538" 
  "1541" -> "1542" 
  "1541" -> "1547" 
  "1541" -> "1556" 
  "1542" -> "1543" 
  "1542" -> "1546" 
  "1543" -> "1544" 
  "1543" -> "1545" 
  "1547" -> "1548" 
  "1548" -> "1549" 
  "1549" -> "1550" 
  "1549" -> "1553" 
  "1549" -> "1555" 
  "1550" -> "1551" 
  "1550" -> "1552" 
  "1553" -> "1554" 
  "1556" -> "1557" 
  "1557" -> "1558" 
  "1557" -> "1563" 
  "1557" -> "1572" 
  "1558" -> "1559" 
  "1558" -> "1562" 
  "1559" -> "1560" 
  "1559" -> "1561" 
  "1563" -> "1564" 
  "1564" -> "1565" 
  "1565" -> "1566" 
  "1565" -> "1569" 
  "1565" -> "1571" 
  "1566" -> "1567" 
  "1566" -> "1568" 
  "1569" -> "1570" 
  "1572" -> "1573" 
  "1573" -> "1574" 
  "1573" -> "1579" 
  "1573" -> "1588" 
  "1574" -> "1575" 
  "1574" -> "1578" 
  "1575" -> "1576" 
  "1575" -> "1577" 
  "1579" -> "1580" 
  "1580" -> "1581" 
  "1581" -> "1582" 
  "1581" -> "1585" 
  "1581" -> "1587" 
  "1582" -> "1583" 
  "1582" -> "1584" 
  "1585" -> "1586" 
  "1588" -> "1589" 
  "1589" -> "1590" 
  "1589" -> "1595" 
  "1589" -> "1604" 
  "1590" -> "1591" 
  "1590" -> "1594" 
  "1591" -> "1592" 
  "1591" -> "1593" 
  "1595" -> "1596" 
  "1596" -> "1597" 
  "1597" -> "1598" 
  "1597" -> "1601" 
  "1597" -> "1603" 
  "1598" -> "1599" 
  "1598" -> "1600" 
  "1601" -> "1602" 
  "1604" -> "1605" 
  "1605" -> "1606" 
  "1605" -> "1611" 
  "1605" -> "1620" 
  "1606" -> "1607" 
  "1606" -> "1610" 
  "1607" -> "1608" 
  "1607" -> "1609" 
  "1611" -> "1612" 
  "1612" -> "1613" 
  "1613" -> "1614" 
  "1613" -> "1617" 
  "1613" -> "1619" 
  "1614" -> "1615" 
  "1614" -> "1616" 
  "1617" -> "1618" 
  "1620" -> "1621" 
  "1621" -> "1622" 
  "1621" -> "1627" 
  "1621" -> "1636" 
  "1622" -> "1623" 
  "1622" -> "1626" 
  "1623" -> "1624" 
  "1623" -> "1625" 
  "1627" -> "1628" 
  "1628" -> "1629" 
  "1629" -> "1630" 
  "1629" -> "1633" 
  "1629" -> "1635" 
  "1630" -> "1631" 
  "1630" -> "1632" 
  "1633" -> "1634" 
  "1636" -> "1637" 
  "1637" -> "1638" 
  "1637" -> "1643" 
  "1637" -> "1652" 
  "1638" -> "1639" 
  "1638" -> "1642" 
  "1639" -> "1640" 
  "1639" -> "1641" 
  "1643" -> "1644" 
  "1644" -> "1645" 
  "1645" -> "1646" 
  "1645" -> "1649" 
  "1645" -> "1651" 
  "1646" -> "1647" 
  "1646" -> "1648" 
  "1649" -> "1650" 
  "1652" -> "1653" 
  "1653" -> "1654" 
  "1654" -> "1655" 
  "1654" -> "1674" 
  "1655" -> "1656" 
  "1655" -> "1657" 
  "1655" -> "1666" 
  "1657" -> "1658" 
  "1657" -> "1659" 
  "1659" -> "1660" 
  "1659" -> "1661" 
  "1661" -> "1662" 
  "1662" -> "1663" 
  "1663" -> "1664" 
  "1663" -> "1665" 
  "1666" -> "1667" 
  "1667" -> "1668" 
  "1667" -> "1671" 
  "1667" -> "1673" 
  "1668" -> "1669" 
  "1668" -> "1670" 
  "1671" -> "1672" 
  "1674" -> "1675" 
  "1676" -> "1677" 
}
