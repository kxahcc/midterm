digraph "eval" {  
"79" [label = <(METHOD,eval)<SUB>75</SUB>> ]
"80" [label = <(PARAM,this)<SUB>75</SUB>> ]
"81" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>75</SUB>> ]
"82" [label = <(CONTROL_STRUCTURE,if (arg1 == null || arg2 == null),if (arg1 == null || arg2 == null))<SUB>76</SUB>> ]
"83" [label = <(&lt;operator&gt;.logicalOr,arg1 == null || arg2 == null)<SUB>76</SUB>> ]
"84" [label = <(&lt;operator&gt;.equals,arg1 == null)<SUB>76</SUB>> ]
"85" [label = <(&lt;operator&gt;.fieldAccess,this.arg1)<SUB>76</SUB>> ]
"86" [label = <(IDENTIFIER,this,arg1 == null)<SUB>76</SUB>> ]
"87" [label = <(FIELD_IDENTIFIER,arg1,arg1)<SUB>76</SUB>> ]
"88" [label = <(LITERAL,null,arg1 == null)<SUB>76</SUB>> ]
"89" [label = <(&lt;operator&gt;.equals,arg2 == null)<SUB>76</SUB>> ]
"90" [label = <(&lt;operator&gt;.fieldAccess,this.arg2)<SUB>76</SUB>> ]
"91" [label = <(IDENTIFIER,this,arg2 == null)<SUB>76</SUB>> ]
"92" [label = <(FIELD_IDENTIFIER,arg2,arg2)<SUB>76</SUB>> ]
"93" [label = <(LITERAL,null,arg2 == null)<SUB>76</SUB>> ]
"94" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>76</SUB>> ]
"95" [label = <(&lt;operator&gt;.throw,throw new BuildException(&quot;both arg1 and arg2 are required in &quot; + &quot;equals&quot;);)<SUB>77</SUB>> ]
"96" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>77</SUB>> ]
"97" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"98" [label = <(IDENTIFIER,$obj0,&lt;empty&gt;)> ]
"99" [label = <(&lt;operator&gt;.alloc,new BuildException(&quot;both arg1 and arg2 are required in &quot; + &quot;equals&quot;))<SUB>77</SUB>> ]
"100" [label = <(&lt;init&gt;,new BuildException(&quot;both arg1 and arg2 are required in &quot; + &quot;equals&quot;))<SUB>77</SUB>> ]
"101" [label = <(IDENTIFIER,$obj0,new BuildException(&quot;both arg1 and arg2 are required in &quot; + &quot;equals&quot;))> ]
"102" [label = <(&lt;operator&gt;.addition,&quot;both arg1 and arg2 are required in &quot; + &quot;equals&quot;)<SUB>77</SUB>> ]
"103" [label = <(LITERAL,&quot;both arg1 and arg2 are required in &quot;,&quot;both arg1 and arg2 are required in &quot; + &quot;equals&quot;)<SUB>77</SUB>> ]
"104" [label = <(LITERAL,&quot;equals&quot;,&quot;both arg1 and arg2 are required in &quot; + &quot;equals&quot;)<SUB>78</SUB>> ]
"105" [label = <(IDENTIFIER,$obj0,&lt;empty&gt;)> ]
"106" [label = <(CONTROL_STRUCTURE,if (trim),if (trim))<SUB>81</SUB>> ]
"107" [label = <(&lt;operator&gt;.fieldAccess,this.trim)<SUB>81</SUB>> ]
"108" [label = <(IDENTIFIER,this,if (trim))<SUB>81</SUB>> ]
"109" [label = <(FIELD_IDENTIFIER,trim,trim)<SUB>81</SUB>> ]
"110" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>81</SUB>> ]
"111" [label = <(&lt;operator&gt;.assignment,this.arg1 = arg1.trim())<SUB>82</SUB>> ]
"112" [label = <(&lt;operator&gt;.fieldAccess,this.arg1)<SUB>82</SUB>> ]
"113" [label = <(IDENTIFIER,this,this.arg1 = arg1.trim())<SUB>82</SUB>> ]
"114" [label = <(FIELD_IDENTIFIER,arg1,arg1)<SUB>82</SUB>> ]
"115" [label = <(trim,arg1.trim())<SUB>82</SUB>> ]
"116" [label = <(&lt;operator&gt;.fieldAccess,this.arg1)<SUB>82</SUB>> ]
"117" [label = <(IDENTIFIER,this,arg1.trim())<SUB>82</SUB>> ]
"118" [label = <(FIELD_IDENTIFIER,arg1,arg1)<SUB>82</SUB>> ]
"119" [label = <(&lt;operator&gt;.assignment,this.arg2 = arg2.trim())<SUB>83</SUB>> ]
"120" [label = <(&lt;operator&gt;.fieldAccess,this.arg2)<SUB>83</SUB>> ]
"121" [label = <(IDENTIFIER,this,this.arg2 = arg2.trim())<SUB>83</SUB>> ]
"122" [label = <(FIELD_IDENTIFIER,arg2,arg2)<SUB>83</SUB>> ]
"123" [label = <(trim,arg2.trim())<SUB>83</SUB>> ]
"124" [label = <(&lt;operator&gt;.fieldAccess,this.arg2)<SUB>83</SUB>> ]
"125" [label = <(IDENTIFIER,this,arg2.trim())<SUB>83</SUB>> ]
"126" [label = <(FIELD_IDENTIFIER,arg2,arg2)<SUB>83</SUB>> ]
"127" [label = <(RETURN,return caseSensitive ? arg1.equals(arg2) : arg1.equalsIgnoreCase(arg2);,return caseSensitive ? arg1.equals(arg2) : arg1.equalsIgnoreCase(arg2);)<SUB>86</SUB>> ]
"128" [label = <(&lt;operator&gt;.conditional,caseSensitive ? arg1.equals(arg2) : arg1.equalsIgnoreCase(arg2))<SUB>86</SUB>> ]
"129" [label = <(&lt;operator&gt;.fieldAccess,this.caseSensitive)<SUB>86</SUB>> ]
"130" [label = <(IDENTIFIER,this,caseSensitive ? arg1.equals(arg2) : arg1.equalsIgnoreCase(arg2))<SUB>86</SUB>> ]
"131" [label = <(FIELD_IDENTIFIER,caseSensitive,caseSensitive)<SUB>86</SUB>> ]
"132" [label = <(equals,arg1.equals(arg2))<SUB>86</SUB>> ]
"133" [label = <(&lt;operator&gt;.fieldAccess,this.arg1)<SUB>86</SUB>> ]
"134" [label = <(IDENTIFIER,this,arg1.equals(arg2))<SUB>86</SUB>> ]
"135" [label = <(FIELD_IDENTIFIER,arg1,arg1)<SUB>86</SUB>> ]
"136" [label = <(&lt;operator&gt;.fieldAccess,this.arg2)<SUB>86</SUB>> ]
"137" [label = <(IDENTIFIER,this,arg1.equals(arg2))<SUB>86</SUB>> ]
"138" [label = <(FIELD_IDENTIFIER,arg2,arg2)<SUB>86</SUB>> ]
"139" [label = <(equalsIgnoreCase,arg1.equalsIgnoreCase(arg2))<SUB>86</SUB>> ]
"140" [label = <(&lt;operator&gt;.fieldAccess,this.arg1)<SUB>86</SUB>> ]
"141" [label = <(IDENTIFIER,this,arg1.equalsIgnoreCase(arg2))<SUB>86</SUB>> ]
"142" [label = <(FIELD_IDENTIFIER,arg1,arg1)<SUB>86</SUB>> ]
"143" [label = <(&lt;operator&gt;.fieldAccess,this.arg2)<SUB>86</SUB>> ]
"144" [label = <(IDENTIFIER,this,arg1.equalsIgnoreCase(arg2))<SUB>86</SUB>> ]
"145" [label = <(FIELD_IDENTIFIER,arg2,arg2)<SUB>86</SUB>> ]
"146" [label = <(MODIFIER,PUBLIC)> ]
"147" [label = <(MODIFIER,VIRTUAL)> ]
"148" [label = <(METHOD_RETURN,boolean)<SUB>75</SUB>> ]
  "79" -> "80" 
  "79" -> "81" 
  "79" -> "146" 
  "79" -> "147" 
  "79" -> "148" 
  "81" -> "82" 
  "81" -> "106" 
  "81" -> "127" 
  "82" -> "83" 
  "82" -> "94" 
  "83" -> "84" 
  "83" -> "89" 
  "84" -> "85" 
  "84" -> "88" 
  "85" -> "86" 
  "85" -> "87" 
  "89" -> "90" 
  "89" -> "93" 
  "90" -> "91" 
  "90" -> "92" 
  "94" -> "95" 
  "95" -> "96" 
  "96" -> "97" 
  "96" -> "100" 
  "96" -> "105" 
  "97" -> "98" 
  "97" -> "99" 
  "100" -> "101" 
  "100" -> "102" 
  "102" -> "103" 
  "102" -> "104" 
  "106" -> "107" 
  "106" -> "110" 
  "107" -> "108" 
  "107" -> "109" 
  "110" -> "111" 
  "110" -> "119" 
  "111" -> "112" 
  "111" -> "115" 
  "112" -> "113" 
  "112" -> "114" 
  "115" -> "116" 
  "116" -> "117" 
  "116" -> "118" 
  "119" -> "120" 
  "119" -> "123" 
  "120" -> "121" 
  "120" -> "122" 
  "123" -> "124" 
  "124" -> "125" 
  "124" -> "126" 
  "127" -> "128" 
  "128" -> "129" 
  "128" -> "132" 
  "128" -> "139" 
  "129" -> "130" 
  "129" -> "131" 
  "132" -> "133" 
  "132" -> "136" 
  "133" -> "134" 
  "133" -> "135" 
  "136" -> "137" 
  "136" -> "138" 
  "139" -> "140" 
  "139" -> "143" 
  "140" -> "141" 
  "140" -> "142" 
  "143" -> "144" 
  "143" -> "145" 
}
