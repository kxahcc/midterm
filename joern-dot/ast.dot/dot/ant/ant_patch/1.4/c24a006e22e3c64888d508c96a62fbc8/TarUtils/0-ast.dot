digraph "parseOctal" {  
"20" [label = <(METHOD,parseOctal)<SUB>79</SUB>> ]
"21" [label = <(PARAM,byte[] header)<SUB>79</SUB>> ]
"22" [label = <(PARAM,int offset)<SUB>79</SUB>> ]
"23" [label = <(PARAM,int length)<SUB>79</SUB>> ]
"24" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>79</SUB>> ]
"25" [label = <(LOCAL,long result: long)> ]
"26" [label = <(&lt;operator&gt;.assignment,long result = 0)<SUB>80</SUB>> ]
"27" [label = <(IDENTIFIER,result,long result = 0)<SUB>80</SUB>> ]
"28" [label = <(LITERAL,0,long result = 0)<SUB>80</SUB>> ]
"29" [label = <(LOCAL,boolean stillPadding: boolean)> ]
"30" [label = <(&lt;operator&gt;.assignment,boolean stillPadding = true)<SUB>81</SUB>> ]
"31" [label = <(IDENTIFIER,stillPadding,boolean stillPadding = true)<SUB>81</SUB>> ]
"32" [label = <(LITERAL,true,boolean stillPadding = true)<SUB>81</SUB>> ]
"33" [label = <(LOCAL,int end: int)> ]
"34" [label = <(&lt;operator&gt;.assignment,int end = offset + length)<SUB>82</SUB>> ]
"35" [label = <(IDENTIFIER,end,int end = offset + length)<SUB>82</SUB>> ]
"36" [label = <(&lt;operator&gt;.addition,offset + length)<SUB>82</SUB>> ]
"37" [label = <(IDENTIFIER,offset,offset + length)<SUB>82</SUB>> ]
"38" [label = <(IDENTIFIER,length,offset + length)<SUB>82</SUB>> ]
"39" [label = <(CONTROL_STRUCTURE,for (int i = offset; Some(i &lt; end); ++i),for (int i = offset; Some(i &lt; end); ++i))<SUB>84</SUB>> ]
"40" [label = <(LOCAL,int i: int)> ]
"41" [label = <(&lt;operator&gt;.assignment,int i = offset)<SUB>84</SUB>> ]
"42" [label = <(IDENTIFIER,i,int i = offset)<SUB>84</SUB>> ]
"43" [label = <(IDENTIFIER,offset,int i = offset)<SUB>84</SUB>> ]
"44" [label = <(&lt;operator&gt;.lessThan,i &lt; end)<SUB>84</SUB>> ]
"45" [label = <(IDENTIFIER,i,i &lt; end)<SUB>84</SUB>> ]
"46" [label = <(IDENTIFIER,end,i &lt; end)<SUB>84</SUB>> ]
"47" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>84</SUB>> ]
"48" [label = <(IDENTIFIER,i,++i)<SUB>84</SUB>> ]
"49" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>84</SUB>> ]
"50" [label = <(CONTROL_STRUCTURE,if (header[i] == 0),if (header[i] == 0))<SUB>85</SUB>> ]
"51" [label = <(&lt;operator&gt;.equals,header[i] == 0)<SUB>85</SUB>> ]
"52" [label = <(&lt;operator&gt;.indexAccess,header[i])<SUB>85</SUB>> ]
"53" [label = <(IDENTIFIER,header,header[i] == 0)<SUB>85</SUB>> ]
"54" [label = <(IDENTIFIER,i,header[i] == 0)<SUB>85</SUB>> ]
"55" [label = <(LITERAL,0,header[i] == 0)<SUB>85</SUB>> ]
"56" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>85</SUB>> ]
"57" [label = <(CONTROL_STRUCTURE,break;,break;)<SUB>86</SUB>> ]
"58" [label = <(CONTROL_STRUCTURE,if (header[i] == (byte) ' ' || header[i] == '0'),if (header[i] == (byte) ' ' || header[i] == '0'))<SUB>89</SUB>> ]
"59" [label = <(&lt;operator&gt;.logicalOr,header[i] == (byte) ' ' || header[i] == '0')<SUB>89</SUB>> ]
"60" [label = <(&lt;operator&gt;.equals,header[i] == (byte) ' ')<SUB>89</SUB>> ]
"61" [label = <(&lt;operator&gt;.indexAccess,header[i])<SUB>89</SUB>> ]
"62" [label = <(IDENTIFIER,header,header[i] == (byte) ' ')<SUB>89</SUB>> ]
"63" [label = <(IDENTIFIER,i,header[i] == (byte) ' ')<SUB>89</SUB>> ]
"64" [label = <(&lt;operator&gt;.cast,(byte) ' ')<SUB>89</SUB>> ]
"65" [label = <(TYPE_REF,byte,byte)<SUB>89</SUB>> ]
"66" [label = <(LITERAL,' ',(byte) ' ')<SUB>89</SUB>> ]
"67" [label = <(&lt;operator&gt;.equals,header[i] == '0')<SUB>89</SUB>> ]
"68" [label = <(&lt;operator&gt;.indexAccess,header[i])<SUB>89</SUB>> ]
"69" [label = <(IDENTIFIER,header,header[i] == '0')<SUB>89</SUB>> ]
"70" [label = <(IDENTIFIER,i,header[i] == '0')<SUB>89</SUB>> ]
"71" [label = <(LITERAL,'0',header[i] == '0')<SUB>89</SUB>> ]
"72" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>89</SUB>> ]
"73" [label = <(CONTROL_STRUCTURE,if (stillPadding),if (stillPadding))<SUB>90</SUB>> ]
"74" [label = <(IDENTIFIER,stillPadding,if (stillPadding))<SUB>90</SUB>> ]
"75" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>90</SUB>> ]
"76" [label = <(CONTROL_STRUCTURE,continue;,continue;)<SUB>91</SUB>> ]
"77" [label = <(CONTROL_STRUCTURE,if (header[i] == (byte) ' '),if (header[i] == (byte) ' '))<SUB>94</SUB>> ]
"78" [label = <(&lt;operator&gt;.equals,header[i] == (byte) ' ')<SUB>94</SUB>> ]
"79" [label = <(&lt;operator&gt;.indexAccess,header[i])<SUB>94</SUB>> ]
"80" [label = <(IDENTIFIER,header,header[i] == (byte) ' ')<SUB>94</SUB>> ]
"81" [label = <(IDENTIFIER,i,header[i] == (byte) ' ')<SUB>94</SUB>> ]
"82" [label = <(&lt;operator&gt;.cast,(byte) ' ')<SUB>94</SUB>> ]
"83" [label = <(TYPE_REF,byte,byte)<SUB>94</SUB>> ]
"84" [label = <(LITERAL,' ',(byte) ' ')<SUB>94</SUB>> ]
"85" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>94</SUB>> ]
"86" [label = <(CONTROL_STRUCTURE,break;,break;)<SUB>95</SUB>> ]
"87" [label = <(&lt;operator&gt;.assignment,stillPadding = false)<SUB>99</SUB>> ]
"88" [label = <(IDENTIFIER,stillPadding,stillPadding = false)<SUB>99</SUB>> ]
"89" [label = <(LITERAL,false,stillPadding = false)<SUB>99</SUB>> ]
"90" [label = <(&lt;operator&gt;.assignment,result = (result &lt;&lt; 3) + (header[i] - '0'))<SUB>100</SUB>> ]
"91" [label = <(IDENTIFIER,result,result = (result &lt;&lt; 3) + (header[i] - '0'))<SUB>100</SUB>> ]
"92" [label = <(&lt;operator&gt;.addition,(result &lt;&lt; 3) + (header[i] - '0'))<SUB>100</SUB>> ]
"93" [label = <(&lt;operator&gt;.shiftLeft,result &lt;&lt; 3)<SUB>100</SUB>> ]
"94" [label = <(IDENTIFIER,result,result &lt;&lt; 3)<SUB>100</SUB>> ]
"95" [label = <(LITERAL,3,result &lt;&lt; 3)<SUB>100</SUB>> ]
"96" [label = <(&lt;operator&gt;.subtraction,header[i] - '0')<SUB>100</SUB>> ]
"97" [label = <(&lt;operator&gt;.indexAccess,header[i])<SUB>100</SUB>> ]
"98" [label = <(IDENTIFIER,header,header[i] - '0')<SUB>100</SUB>> ]
"99" [label = <(IDENTIFIER,i,header[i] - '0')<SUB>100</SUB>> ]
"100" [label = <(LITERAL,'0',header[i] - '0')<SUB>100</SUB>> ]
"101" [label = <(RETURN,return result;,return result;)<SUB>103</SUB>> ]
"102" [label = <(IDENTIFIER,result,return result;)<SUB>103</SUB>> ]
"103" [label = <(MODIFIER,PUBLIC)> ]
"104" [label = <(MODIFIER,STATIC)> ]
"105" [label = <(METHOD_RETURN,long)<SUB>79</SUB>> ]
  "20" -> "21" 
  "20" -> "22" 
  "20" -> "23" 
  "20" -> "24" 
  "20" -> "103" 
  "20" -> "104" 
  "20" -> "105" 
  "24" -> "25" 
  "24" -> "26" 
  "24" -> "29" 
  "24" -> "30" 
  "24" -> "33" 
  "24" -> "34" 
  "24" -> "39" 
  "24" -> "101" 
  "26" -> "27" 
  "26" -> "28" 
  "30" -> "31" 
  "30" -> "32" 
  "34" -> "35" 
  "34" -> "36" 
  "36" -> "37" 
  "36" -> "38" 
  "39" -> "40" 
  "39" -> "41" 
  "39" -> "44" 
  "39" -> "47" 
  "39" -> "49" 
  "41" -> "42" 
  "41" -> "43" 
  "44" -> "45" 
  "44" -> "46" 
  "47" -> "48" 
  "49" -> "50" 
  "49" -> "58" 
  "49" -> "87" 
  "49" -> "90" 
  "50" -> "51" 
  "50" -> "56" 
  "51" -> "52" 
  "51" -> "55" 
  "52" -> "53" 
  "52" -> "54" 
  "56" -> "57" 
  "58" -> "59" 
  "58" -> "72" 
  "59" -> "60" 
  "59" -> "67" 
  "60" -> "61" 
  "60" -> "64" 
  "61" -> "62" 
  "61" -> "63" 
  "64" -> "65" 
  "64" -> "66" 
  "67" -> "68" 
  "67" -> "71" 
  "68" -> "69" 
  "68" -> "70" 
  "72" -> "73" 
  "72" -> "77" 
  "73" -> "74" 
  "73" -> "75" 
  "75" -> "76" 
  "77" -> "78" 
  "77" -> "85" 
  "78" -> "79" 
  "78" -> "82" 
  "79" -> "80" 
  "79" -> "81" 
  "82" -> "83" 
  "82" -> "84" 
  "85" -> "86" 
  "87" -> "88" 
  "87" -> "89" 
  "90" -> "91" 
  "90" -> "92" 
  "92" -> "93" 
  "92" -> "96" 
  "93" -> "94" 
  "93" -> "95" 
  "96" -> "97" 
  "96" -> "100" 
  "97" -> "98" 
  "97" -> "99" 
  "101" -> "102" 
}
