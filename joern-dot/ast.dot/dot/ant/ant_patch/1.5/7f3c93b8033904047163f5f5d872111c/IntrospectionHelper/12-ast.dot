digraph "createAttributeSetter" {  
"1201" [label = <(METHOD,createAttributeSetter)<SUB>696</SUB>> ]
"1202" [label = <(PARAM,this)<SUB>696</SUB>> ]
"1203" [label = <(PARAM,final Method m)<SUB>696</SUB>> ]
"1204" [label = <(PARAM,Class arg)<SUB>697</SUB>> ]
"1205" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>697</SUB>> ]
"1206" [label = <(LOCAL,Class reflectedArg: java.lang.Class)> ]
"1207" [label = <(&lt;operator&gt;.assignment,Class reflectedArg = PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class) PRIMITIVE_TYPE_MAP.get(arg) : arg)<SUB>700</SUB>> ]
"1208" [label = <(IDENTIFIER,reflectedArg,Class reflectedArg = PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class) PRIMITIVE_TYPE_MAP.get(arg) : arg)<SUB>700</SUB>> ]
"1209" [label = <(&lt;operator&gt;.conditional,PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class) PRIMITIVE_TYPE_MAP.get(arg) : arg)<SUB>700</SUB>> ]
"1210" [label = <(containsKey,PRIMITIVE_TYPE_MAP.containsKey(arg))<SUB>700</SUB>> ]
"1211" [label = <(&lt;operator&gt;.fieldAccess,IntrospectionHelper.PRIMITIVE_TYPE_MAP)<SUB>700</SUB>> ]
"1212" [label = <(IDENTIFIER,IntrospectionHelper,PRIMITIVE_TYPE_MAP.containsKey(arg))<SUB>700</SUB>> ]
"1213" [label = <(FIELD_IDENTIFIER,PRIMITIVE_TYPE_MAP,PRIMITIVE_TYPE_MAP)<SUB>700</SUB>> ]
"1214" [label = <(IDENTIFIER,arg,PRIMITIVE_TYPE_MAP.containsKey(arg))<SUB>700</SUB>> ]
"1215" [label = <(&lt;operator&gt;.cast,(Class) PRIMITIVE_TYPE_MAP.get(arg))<SUB>701</SUB>> ]
"1216" [label = <(TYPE_REF,Class,Class)<SUB>701</SUB>> ]
"1217" [label = <(get,PRIMITIVE_TYPE_MAP.get(arg))<SUB>701</SUB>> ]
"1218" [label = <(&lt;operator&gt;.fieldAccess,IntrospectionHelper.PRIMITIVE_TYPE_MAP)<SUB>701</SUB>> ]
"1219" [label = <(IDENTIFIER,IntrospectionHelper,PRIMITIVE_TYPE_MAP.get(arg))<SUB>701</SUB>> ]
"1220" [label = <(FIELD_IDENTIFIER,PRIMITIVE_TYPE_MAP,PRIMITIVE_TYPE_MAP)<SUB>701</SUB>> ]
"1221" [label = <(IDENTIFIER,arg,PRIMITIVE_TYPE_MAP.get(arg))<SUB>701</SUB>> ]
"1222" [label = <(IDENTIFIER,arg,PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class) PRIMITIVE_TYPE_MAP.get(arg) : arg)<SUB>701</SUB>> ]
"1223" [label = <(CONTROL_STRUCTURE,if (java.lang.String.class.equals(reflectedArg)),if (java.lang.String.class.equals(reflectedArg)))<SUB>704</SUB>> ]
"1224" [label = <(equals,this.equals(reflectedArg))<SUB>704</SUB>> ]
"1225" [label = <(&lt;operator&gt;.fieldAccess,java.lang.String.class)<SUB>704</SUB>> ]
"1226" [label = <(IDENTIFIER,java.lang.String,this.equals(reflectedArg))<SUB>704</SUB>> ]
"1227" [label = <(FIELD_IDENTIFIER,class,class)<SUB>704</SUB>> ]
"1228" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>704</SUB>> ]
"1229" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>704</SUB>> ]
"1230" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012};)<SUB>705</SUB>> ]
"1231" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>705</SUB>> ]
"1232" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1233" [label = <(IDENTIFIER,$obj27,&lt;empty&gt;)> ]
"1234" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012})<SUB>705</SUB>> ]
"1235" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012})<SUB>705</SUB>> ]
"1236" [label = <(IDENTIFIER,$obj27,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new String[] { value });\012    }\012})> ]
"1237" [label = <(IDENTIFIER,$obj27,&lt;empty&gt;)> ]
"1238" [label = <(CONTROL_STRUCTURE,else,else)<SUB>713</SUB>> ]
"1239" [label = <(CONTROL_STRUCTURE,if (java.lang.Character.class.equals(reflectedArg)),if (java.lang.Character.class.equals(reflectedArg)))<SUB>713</SUB>> ]
"1240" [label = <(equals,this.equals(reflectedArg))<SUB>713</SUB>> ]
"1241" [label = <(&lt;operator&gt;.fieldAccess,java.lang.Character.class)<SUB>713</SUB>> ]
"1242" [label = <(IDENTIFIER,java.lang.Character,this.equals(reflectedArg))<SUB>713</SUB>> ]
"1243" [label = <(FIELD_IDENTIFIER,class,class)<SUB>713</SUB>> ]
"1244" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>713</SUB>> ]
"1245" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>713</SUB>> ]
"1246" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012};)<SUB>714</SUB>> ]
"1247" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>714</SUB>> ]
"1248" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1249" [label = <(IDENTIFIER,$obj28,&lt;empty&gt;)> ]
"1250" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012})<SUB>714</SUB>> ]
"1251" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012})<SUB>714</SUB>> ]
"1252" [label = <(IDENTIFIER,$obj28,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Character[] { new Character(value.charAt(0)) });\012    }\012})> ]
"1253" [label = <(IDENTIFIER,$obj28,&lt;empty&gt;)> ]
"1254" [label = <(CONTROL_STRUCTURE,else,else)<SUB>723</SUB>> ]
"1255" [label = <(CONTROL_STRUCTURE,if (java.lang.Boolean.class.equals(reflectedArg)),if (java.lang.Boolean.class.equals(reflectedArg)))<SUB>723</SUB>> ]
"1256" [label = <(equals,this.equals(reflectedArg))<SUB>723</SUB>> ]
"1257" [label = <(&lt;operator&gt;.fieldAccess,java.lang.Boolean.class)<SUB>723</SUB>> ]
"1258" [label = <(IDENTIFIER,java.lang.Boolean,this.equals(reflectedArg))<SUB>723</SUB>> ]
"1259" [label = <(FIELD_IDENTIFIER,class,class)<SUB>723</SUB>> ]
"1260" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>723</SUB>> ]
"1261" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>723</SUB>> ]
"1262" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012};)<SUB>724</SUB>> ]
"1263" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>724</SUB>> ]
"1264" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1265" [label = <(IDENTIFIER,$obj29,&lt;empty&gt;)> ]
"1266" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012})<SUB>724</SUB>> ]
"1267" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012})<SUB>724</SUB>> ]
"1268" [label = <(IDENTIFIER,$obj29,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Boolean[] { new Boolean(Project.toBoolean(value)) });\012    }\012})> ]
"1269" [label = <(IDENTIFIER,$obj29,&lt;empty&gt;)> ]
"1270" [label = <(CONTROL_STRUCTURE,else,else)<SUB>734</SUB>> ]
"1271" [label = <(CONTROL_STRUCTURE,if (java.lang.Class.class.equals(reflectedArg)),if (java.lang.Class.class.equals(reflectedArg)))<SUB>734</SUB>> ]
"1272" [label = <(equals,this.equals(reflectedArg))<SUB>734</SUB>> ]
"1273" [label = <(&lt;operator&gt;.fieldAccess,java.lang.Class.class)<SUB>734</SUB>> ]
"1274" [label = <(IDENTIFIER,java.lang.Class,this.equals(reflectedArg))<SUB>734</SUB>> ]
"1275" [label = <(FIELD_IDENTIFIER,class,class)<SUB>734</SUB>> ]
"1276" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>734</SUB>> ]
"1277" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>734</SUB>> ]
"1278" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012};)<SUB>735</SUB>> ]
"1279" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>735</SUB>> ]
"1280" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1281" [label = <(IDENTIFIER,$obj30,&lt;empty&gt;)> ]
"1282" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012})<SUB>735</SUB>> ]
"1283" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012})<SUB>735</SUB>> ]
"1284" [label = <(IDENTIFIER,$obj30,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            m.invoke(parent, new Class[] { Class.forName(value) });\012        } catch (ClassNotFoundException ce) {\012            throw new BuildException(ce);\012        }\012    }\012})> ]
"1285" [label = <(IDENTIFIER,$obj30,&lt;empty&gt;)> ]
"1286" [label = <(CONTROL_STRUCTURE,else,else)<SUB>747</SUB>> ]
"1287" [label = <(CONTROL_STRUCTURE,if (java.io.File.class.equals(reflectedArg)),if (java.io.File.class.equals(reflectedArg)))<SUB>747</SUB>> ]
"1288" [label = <(equals,this.equals(reflectedArg))<SUB>747</SUB>> ]
"1289" [label = <(&lt;operator&gt;.fieldAccess,java.io.File.class)<SUB>747</SUB>> ]
"1290" [label = <(IDENTIFIER,java.io.File,this.equals(reflectedArg))<SUB>747</SUB>> ]
"1291" [label = <(FIELD_IDENTIFIER,class,class)<SUB>747</SUB>> ]
"1292" [label = <(IDENTIFIER,reflectedArg,this.equals(reflectedArg))<SUB>747</SUB>> ]
"1293" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>747</SUB>> ]
"1294" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012};)<SUB>748</SUB>> ]
"1295" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>748</SUB>> ]
"1296" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1297" [label = <(IDENTIFIER,$obj31,&lt;empty&gt;)> ]
"1298" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012})<SUB>748</SUB>> ]
"1299" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012})<SUB>748</SUB>> ]
"1300" [label = <(IDENTIFIER,$obj31,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new File[] { p.resolveFile(value) });\012    }\012})> ]
"1301" [label = <(IDENTIFIER,$obj31,&lt;empty&gt;)> ]
"1302" [label = <(CONTROL_STRUCTURE,else,else)<SUB>757</SUB>> ]
"1303" [label = <(CONTROL_STRUCTURE,if (org.apache.tools.ant.types.Path.class.equals(reflectedArg)),if (org.apache.tools.ant.types.Path.class.equals(reflectedArg)))<SUB>757</SUB>> ]
"1304" [label = <(equals,equals(reflectedArg))<SUB>757</SUB>> ]
"1305" [label = <(&lt;operator&gt;.fieldAccess,org.apache.tools.ant.types.Path.class)<SUB>757</SUB>> ]
"1306" [label = <(IDENTIFIER,org.apache.tools.ant.types.Path,equals(reflectedArg))<SUB>757</SUB>> ]
"1307" [label = <(FIELD_IDENTIFIER,class,class)<SUB>757</SUB>> ]
"1308" [label = <(IDENTIFIER,reflectedArg,equals(reflectedArg))<SUB>757</SUB>> ]
"1309" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>757</SUB>> ]
"1310" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012};)<SUB>758</SUB>> ]
"1311" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>758</SUB>> ]
"1312" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1313" [label = <(IDENTIFIER,$obj32,&lt;empty&gt;)> ]
"1314" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012})<SUB>758</SUB>> ]
"1315" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012})<SUB>758</SUB>> ]
"1316" [label = <(IDENTIFIER,$obj32,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {\012        m.invoke(parent, new Path[] { new Path(p, value) });\012    }\012})> ]
"1317" [label = <(IDENTIFIER,$obj32,&lt;empty&gt;)> ]
"1318" [label = <(CONTROL_STRUCTURE,else,else)<SUB>767</SUB>> ]
"1319" [label = <(CONTROL_STRUCTURE,if (org.apache.tools.ant.types.EnumeratedAttribute.class.isAssignableFrom(reflectedArg)),if (org.apache.tools.ant.types.EnumeratedAttribute.class.isAssignableFrom(reflectedArg)))<SUB>767</SUB>> ]
"1320" [label = <(isAssignableFrom,isAssignableFrom(reflectedArg))<SUB>767</SUB>> ]
"1321" [label = <(&lt;operator&gt;.fieldAccess,org.apache.tools.ant.types.EnumeratedAttribute.class)<SUB>767</SUB>> ]
"1322" [label = <(IDENTIFIER,org.apache.tools.ant.types.EnumeratedAttribute,isAssignableFrom(reflectedArg))<SUB>767</SUB>> ]
"1323" [label = <(FIELD_IDENTIFIER,class,class)<SUB>767</SUB>> ]
"1324" [label = <(IDENTIFIER,reflectedArg,isAssignableFrom(reflectedArg))<SUB>767</SUB>> ]
"1325" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>767</SUB>> ]
"1326" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            org.apache.tools.ant.types.EnumeratedAttribute ea = (org.apache.tools.ant.types.EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            org.apache.tools.ant.types.EnumeratedAttribute ea = (org.apache.tools.ant.types.EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012};)<SUB>768</SUB>> ]
"1327" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>768</SUB>> ]
"1328" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1329" [label = <(IDENTIFIER,$obj33,&lt;empty&gt;)> ]
"1330" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            org.apache.tools.ant.types.EnumeratedAttribute ea = (org.apache.tools.ant.types.EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})<SUB>768</SUB>> ]
"1331" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            org.apache.tools.ant.types.EnumeratedAttribute ea = (org.apache.tools.ant.types.EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})<SUB>768</SUB>> ]
"1332" [label = <(IDENTIFIER,$obj33,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            org.apache.tools.ant.types.EnumeratedAttribute ea = (org.apache.tools.ant.types.EnumeratedAttribute) reflectedArg.newInstance();\012            ea.setValue(value);\012            m.invoke(parent, new EnumeratedAttribute[] { ea });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})> ]
"1333" [label = <(IDENTIFIER,$obj33,&lt;empty&gt;)> ]
"1334" [label = <(CONTROL_STRUCTURE,else,else)<SUB>785</SUB>> ]
"1335" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>785</SUB>> ]
"1336" [label = <(CONTROL_STRUCTURE,try,try)<SUB>787</SUB>> ]
"1337" [label = <(BLOCK,try,try)<SUB>787</SUB>> ]
"1338" [label = <(LOCAL,Constructor c: java.lang.reflect.Constructor)> ]
"1339" [label = <(&lt;operator&gt;.assignment,Constructor c = reflectedArg.getConstructor(new Class[] { java.lang.String.class }))<SUB>788</SUB>> ]
"1340" [label = <(IDENTIFIER,c,Constructor c = reflectedArg.getConstructor(new Class[] { java.lang.String.class }))<SUB>788</SUB>> ]
"1341" [label = <(getConstructor,reflectedArg.getConstructor(new Class[] { java.lang.String.class }))<SUB>789</SUB>> ]
"1342" [label = <(IDENTIFIER,reflectedArg,reflectedArg.getConstructor(new Class[] { java.lang.String.class }))<SUB>789</SUB>> ]
"1343" [label = <(&lt;operator&gt;.arrayInitializer,&lt;operator&gt;.arrayInitializer)<SUB>789</SUB>> ]
"1344" [label = <(&lt;operator&gt;.arrayInitializer,new Class[] { java.lang.String.class })<SUB>789</SUB>> ]
"1345" [label = <(&lt;operator&gt;.fieldAccess,java.lang.String.class)<SUB>789</SUB>> ]
"1346" [label = <(IDENTIFIER,java.lang.String,new Class[] { java.lang.String.class })<SUB>789</SUB>> ]
"1347" [label = <(FIELD_IDENTIFIER,class,class)<SUB>789</SUB>> ]
"1348" [label = <(RETURN,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (attribute instanceof ProjectComponent) {\012                ((ProjectComponent) attribute).setProject(p);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012};,return new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (attribute instanceof ProjectComponent) {\012                ((ProjectComponent) attribute).setProject(p);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012};)<SUB>791</SUB>> ]
"1349" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>791</SUB>> ]
"1350" [label = <(&lt;operator&gt;.assignment,&lt;empty&gt;)> ]
"1351" [label = <(IDENTIFIER,$obj34,&lt;empty&gt;)> ]
"1352" [label = <(&lt;operator&gt;.alloc,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (attribute instanceof ProjectComponent) {\012                ((ProjectComponent) attribute).setProject(p);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})<SUB>791</SUB>> ]
"1353" [label = <(&lt;init&gt;,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (attribute instanceof ProjectComponent) {\012                ((ProjectComponent) attribute).setProject(p);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})<SUB>791</SUB>> ]
"1354" [label = <(IDENTIFIER,$obj34,new AttributeSetter() {\012\012    public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {\012        try {\012            Object attribute = c.newInstance(new String[] { value });\012            if (attribute instanceof ProjectComponent) {\012                ((ProjectComponent) attribute).setProject(p);\012            }\012            m.invoke(parent, new Object[] { attribute });\012        } catch (InstantiationException ie) {\012            throw new BuildException(ie);\012        }\012    }\012})> ]
"1355" [label = <(IDENTIFIER,$obj34,&lt;empty&gt;)> ]
"1356" [label = <(BLOCK,catch,catch)> ]
"1357" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>807</SUB>> ]
"1358" [label = <(RETURN,return null;,return null;)<SUB>811</SUB>> ]
"1359" [label = <(LITERAL,null,return null;)<SUB>811</SUB>> ]
"1360" [label = <(MODIFIER,PRIVATE)> ]
"1361" [label = <(MODIFIER,VIRTUAL)> ]
"1362" [label = <(METHOD_RETURN,org.apache.tools.ant.IntrospectionHelper$AttributeSetter)<SUB>696</SUB>> ]
  "1201" -> "1202" 
  "1201" -> "1203" 
  "1201" -> "1204" 
  "1201" -> "1205" 
  "1201" -> "1360" 
  "1201" -> "1361" 
  "1201" -> "1362" 
  "1205" -> "1206" 
  "1205" -> "1207" 
  "1205" -> "1223" 
  "1205" -> "1358" 
  "1207" -> "1208" 
  "1207" -> "1209" 
  "1209" -> "1210" 
  "1209" -> "1215" 
  "1209" -> "1222" 
  "1210" -> "1211" 
  "1210" -> "1214" 
  "1211" -> "1212" 
  "1211" -> "1213" 
  "1215" -> "1216" 
  "1215" -> "1217" 
  "1217" -> "1218" 
  "1217" -> "1221" 
  "1218" -> "1219" 
  "1218" -> "1220" 
  "1223" -> "1224" 
  "1223" -> "1229" 
  "1223" -> "1238" 
  "1224" -> "1225" 
  "1224" -> "1228" 
  "1225" -> "1226" 
  "1225" -> "1227" 
  "1229" -> "1230" 
  "1230" -> "1231" 
  "1231" -> "1232" 
  "1231" -> "1235" 
  "1231" -> "1237" 
  "1232" -> "1233" 
  "1232" -> "1234" 
  "1235" -> "1236" 
  "1238" -> "1239" 
  "1239" -> "1240" 
  "1239" -> "1245" 
  "1239" -> "1254" 
  "1240" -> "1241" 
  "1240" -> "1244" 
  "1241" -> "1242" 
  "1241" -> "1243" 
  "1245" -> "1246" 
  "1246" -> "1247" 
  "1247" -> "1248" 
  "1247" -> "1251" 
  "1247" -> "1253" 
  "1248" -> "1249" 
  "1248" -> "1250" 
  "1251" -> "1252" 
  "1254" -> "1255" 
  "1255" -> "1256" 
  "1255" -> "1261" 
  "1255" -> "1270" 
  "1256" -> "1257" 
  "1256" -> "1260" 
  "1257" -> "1258" 
  "1257" -> "1259" 
  "1261" -> "1262" 
  "1262" -> "1263" 
  "1263" -> "1264" 
  "1263" -> "1267" 
  "1263" -> "1269" 
  "1264" -> "1265" 
  "1264" -> "1266" 
  "1267" -> "1268" 
  "1270" -> "1271" 
  "1271" -> "1272" 
  "1271" -> "1277" 
  "1271" -> "1286" 
  "1272" -> "1273" 
  "1272" -> "1276" 
  "1273" -> "1274" 
  "1273" -> "1275" 
  "1277" -> "1278" 
  "1278" -> "1279" 
  "1279" -> "1280" 
  "1279" -> "1283" 
  "1279" -> "1285" 
  "1280" -> "1281" 
  "1280" -> "1282" 
  "1283" -> "1284" 
  "1286" -> "1287" 
  "1287" -> "1288" 
  "1287" -> "1293" 
  "1287" -> "1302" 
  "1288" -> "1289" 
  "1288" -> "1292" 
  "1289" -> "1290" 
  "1289" -> "1291" 
  "1293" -> "1294" 
  "1294" -> "1295" 
  "1295" -> "1296" 
  "1295" -> "1299" 
  "1295" -> "1301" 
  "1296" -> "1297" 
  "1296" -> "1298" 
  "1299" -> "1300" 
  "1302" -> "1303" 
  "1303" -> "1304" 
  "1303" -> "1309" 
  "1303" -> "1318" 
  "1304" -> "1305" 
  "1304" -> "1308" 
  "1305" -> "1306" 
  "1305" -> "1307" 
  "1309" -> "1310" 
  "1310" -> "1311" 
  "1311" -> "1312" 
  "1311" -> "1315" 
  "1311" -> "1317" 
  "1312" -> "1313" 
  "1312" -> "1314" 
  "1315" -> "1316" 
  "1318" -> "1319" 
  "1319" -> "1320" 
  "1319" -> "1325" 
  "1319" -> "1334" 
  "1320" -> "1321" 
  "1320" -> "1324" 
  "1321" -> "1322" 
  "1321" -> "1323" 
  "1325" -> "1326" 
  "1326" -> "1327" 
  "1327" -> "1328" 
  "1327" -> "1331" 
  "1327" -> "1333" 
  "1328" -> "1329" 
  "1328" -> "1330" 
  "1331" -> "1332" 
  "1334" -> "1335" 
  "1335" -> "1336" 
  "1336" -> "1337" 
  "1336" -> "1356" 
  "1337" -> "1338" 
  "1337" -> "1339" 
  "1337" -> "1348" 
  "1339" -> "1340" 
  "1339" -> "1341" 
  "1341" -> "1342" 
  "1341" -> "1343" 
  "1343" -> "1344" 
  "1344" -> "1345" 
  "1345" -> "1346" 
  "1345" -> "1347" 
  "1348" -> "1349" 
  "1349" -> "1350" 
  "1349" -> "1353" 
  "1349" -> "1355" 
  "1350" -> "1351" 
  "1350" -> "1352" 
  "1353" -> "1354" 
  "1356" -> "1357" 
  "1358" -> "1359" 
}
